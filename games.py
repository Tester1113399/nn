import asyncio
import random
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram import Router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

from db import (
    update_balance, update_game_stats, add_referral_bonus, add_bet_to_history, get_balance, add_loss_to_cashback, get_user_stats
)

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
class GameState(StatesGroup):
    main_menu = State()
    bet_amount = State()
    twist_game = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CHANNEL_ID = "-1002816845887"
user_active_bets = {}
game_queue = []
is_game_running = False

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∏–Ω (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–æ 24 –º–∏–Ω)
MINES_COEFFICIENTS = {
    2: [1.02, 1.11, 1.22, 1.34, 1.48, 1.65, 1.84, 2.07, 2.35, 2.69, 3.1, 3.62, 4.27, 5.13, 6.27, 7.83, 10.07, 13.43, 18.8, 27.56, 42.21, 68.0, 117.5, 226.9],
    3: [1.07, 1.22, 1.4, 1.63, 1.9, 2.23, 2.65, 3.18, 3.86, 4.75, 5.94, 7.56, 9.83, 13.1, 18.02, 25.74, 38.61, 61.77, 108.0, 207.4, 434.03, 1014.3, 2710.8, 8547.0],
    4: [1.12, 1.34, 1.62, 1.97, 2.43, 3.02, 3.82, 4.89, 6.35, 8.37, 11.21, 15.29, 21.29, 30.27, 43.97, 65.52, 100.4, 159.84, 264.4, 456.7, 834.9, 1659.8, 3652.6, 9130.2],
    5: [1.18, 1.48, 1.87, 2.39, 3.09, 4.04, 5.37, 7.27, 10.02, 14.05, 20.06, 29.26, 43.89, 67.58, 107.3, 175.4, 295.7, 514.4, 929.6, 1764.0, 3528.0, 7409.9, 16923.0, 42307.5],
    6: [1.24, 1.64, 2.17, 2.93, 4.01, 5.56, 7.85, 11.24, 16.49, 24.74, 37.86, 59.28, 94.85, 155.4, 261.9, 454.4, 815.9, 1509.4, 2887.9, 5775.8, 12103.7, 26628.1, 63507.0, 170685.3],
    7: [1.31, 1.81, 2.54, 3.62, 5.25, 7.72, 11.61, 17.94, 28.37, 46.3, 77.17, 131.4, 229.9, 413.8, 765.6, 1454.3, 2827.2, 5654.4, 11742.5, 25232.7, 56773.5, 134257.9, 344669.5, 980476.9],
    8: [1.39, 2.0, 2.97, 4.47, 6.88, 10.78, 17.24, 28.26, 47.4, 81.33, 142.3, 255.6, 471.2, 892.7, 1742.4, 3484.8, 7162.9, 15335.4, 34504.6, 80844.1, 196840.7, 508985.8, 1399718.0, 4199154.0],
    9: [1.48, 2.22, 3.49, 5.58, 9.09, 15.15, 25.95, 45.4, 81.73, 149.5, 281.1, 542.1, 1084.2, 2223.8, 4725.4, 10350.8, 23289.3, 54008.5, 129620.4, 324051.0, 842533.0, 2317841.3, 6953524.0, 22778773.0],
    10: [1.58, 2.47, 4.12, 7.07, 12.36, 22.25, 40.86, 76.6, 147.9, 294.4, 596.9, 1253.3, 2696.4, 5978.6, 13759.0, 32622.6, 80056.5, 202641.3, 533703.5, 1468245.6, 4172130.2, 12516390.6, 39427469.7, 131424899.0],
    11: [1.69, 2.76, 4.86, 9.01, 17.02, 33.29, 66.58, 136.2, 287.0, 626.5, 1409.6, 3276.1, 7690.2, 18616.0, 46540.0, 119804.0, 318411.0, 875131.0, 2450366.0, 7126061.0, 21378183.0, 67434322.0, 223447740.0, 781667090.0],
    12: [1.81, 3.09, 5.75, 11.5, 23.86, 51.45, 113.2, 258.2, 600.8, 1442.0, 3564.9, 9053.8, 23639.9, 63573.0, 176090.0, 501686.0, 1471010.0, 4413030.0, 13776843.0, 44409499.0, 148031663.0, 518610822.0, 1888772008.0, 7264147693.0],
    13: [1.94, 3.48, 6.83, 14.77, 33.48, 78.78, 190.3, 472.5, 1201.3, 3154.4, 8411.8, 23138.0, 65186.4, 189042.2, 567126.6, 1757892.0, 5537654.4, 17984630.0, 60548220.0, 212719768.0, 771998228.0, 2893324354.0, 11397165380.0, 46563778061.0],
    14: [2.08, 3.92, 8.17, 18.95, 46.67, 119.8, 315.4, 861.8, 2413.1, 6896.0, 20171.5, 60514.5, 186593.0, 592698.6, 1927077.0, 6423590.0, 22082565.0, 77288776.0, 278740794.0, 1037776285.0, 3946048280.0, 15627393120.0, 64780804667.0, 280061448727.0],
    15: [2.24, 4.42, 9.8, 23.04, 64.59, 188.3, 566.8, 1747.5, 5511.9, 17859.7, 59532.0, 202609.0, 706130.0, 2542068.0, 9323850.0, 34995936.0, 134596103.0, 525846402.0, 2103385608.0, 8617727532.0, 36474867387.0, 158952290883.0, 711885208973.0, 3291951441235.0],
    16: [2.42, 4.99, 11.84, 29.6, 77.69, 209.8, 580.5, 1654.2, 4861.1, 14583.2, 44844.7, 140640.9, 451051.0, 1486418.4, 5049663.0, 17673821.0, 63465123.6, 233407453.2, 875277199.0, 3326540256.0, 12885662997.6, 51542651990.4, 212424992959.6, 896344969170.3],
    17: [2.62, 5.63, 14.32, 38.19, 107.7, 314.6, 954.7, 2954.7, 9467.1, 31223.7, 106359.5, 370259.3, 1334133.5, 4891822.9, 18567336.0, 71973162.5, 284892650.0, 1139570600.0, 4618574400.0, 18918554440.0, 78827729840.0, 334398987600.0, 1449137305420.0, 6421041263848.0],
    18: [2.84, 6.35, 17.43, 49.8, 149.4, 463.3, 1480.7, 4923.6, 16798.2, 58693.1, 211730.0, 784112.5, 2940421.9, 11387078.1, 44634062.5, 179861250.0, 742970125.0, 3127134525.0, 13409075256.3, 58896781125.0, 262935514062.5, 1197610313281.3, 5586480956093.8, 26378438408437.5],
    19: [3.08, 7.18, 21.34, 65.29, 208.9, 697.0, 2439.5, 8738.2, 32017.5, 119315.6, 460606.0, 1842424.0, 7601996.0, 32208583.2, 139465642.4, 614828906.5, 2767530079.3, 12653888361.5, 58782277618.0, 277721300684.0, 1333422432832.0, 6555441700536.0, 32777208502680.0, 166460602763816.0],
    20: [3.35, 8.17, 26.41, 86.36, 296.2, 1066.3, 3965.1, 15244.9, 60979.6, 249480.7, 1047001.4, 4516606.0, 20024664.3, 91111896.4, 421848779.5, 1967428637.8, 9245801509.7, 44459847246.7, 217253011829.0, 1077266259145.0, 5420831295725.0, 27652640243475.0, 142817808625987.5, 743332564935593.8],
    21: [3.64, 9.32, 32.92, 115.2, 424.4, 1616.6, 6414.4, 26393.5, 111656.9, 489690.3, 2202406.4, 10112881.9, 47529451.0, 230145805.0, 1150729025.0, 5848076328.1, 30329596703.1, 159630506796.2, 855563386578.3, 4659798426180.6, 25828892043893.1, 145162276246440.6, 823874986983229.4, 4743171354192169.0],
    22: [3.96, 10.7, 41.28, 154.8, 615.2, 2513.8, 10555.8, 45390.0, 202755.0, 929472.3, 4415945.1, 21582718.0, 109913590.0, 574543068.0, 3072730231.0, 16889116271.3, 94700410000.0, 540001771428.6, 3132010285714.3, 18520060000000.0, 111120360000000.0, 678323769230769.2, 4186546153846153.8, 26166032307692307.7],
    23: [4.32, 12.35, 52.14, 210.6, 896.7, 3946.7, 17823.0, 82106.3, 388497.5, 1864034.0, 9321170.0, 47988928.0, 254415572.7, 1398485900.0, 7891683055.6, 45809618888.9, 271758113333.3, 1629348800000.0, 9977732571428.6, 61835203428571.4, 388345021714285.7, 2466208138857142.9, 15825052850285714.3, 102862843726857142.9],
    24: [4.72, 14.32, 66.82, 288.5, 1325.6, 6286.9, 30436.9, 151184.3, 766871.5, 3971230.8, 21042162.1, 113158734.0, 625322537.0, 3563557357.1, 20648616000.0, 123891696000.0, 765571360000.0, 4895457142857.1, 31771542857142.9, 210143785714285.7, 1400958571428571.4, 9539729142857142.9, 65812200000000000.0, 460885400000000000.0]
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –±–∞—à–Ω–∏
TOWER_COEFFICIENTS = {
    1: [1.17, 1.47, 1.84, 2.29, 2.87, 3.59],
    2: [1.57, 2.61, 4.35, 7.25, 12.09, 20.15],
    3: [2.35, 5.87, 14.69, 36.72, 91.80, 229.49],
    4: [4.70, 23.50, 117.50, 587.50, 2937.50, 14687.50]
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_twist_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîÑ –°–ø–∏–Ω", callback_data="twist_spin"))
    builder.row(InlineKeyboardButton(text="üí∏ –ó–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫", callback_data="twist_cashout"))
    builder.row(InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="twist_exit"))
    return builder.as_markup()

def create_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="play_slots"))
    builder.row(InlineKeyboardButton(text="üé≤ –ö—É–±—ã", callback_data="play_dice_menu"))
    builder.row(InlineKeyboardButton(text="üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="play_bowling"))
    builder.row(InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="play_darts"))
    builder.row(InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="play_basketball"))
    builder.row(InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    builder.row(InlineKeyboardButton(text="üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"))
    builder.row(InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"))
    builder.row(InlineKeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞", callback_data="referral"))
    builder.row(InlineKeyboardButton(text="üéÆ –¢–≤–∏—Å—Ç", callback_data="play_twist"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –µ—Å—Ç—å –≤ db.py –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
    # register_user_if_not_exists(user_id) # –ü—Ä–∏–º–µ—Ä

    await message.answer(
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ!\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä–∞—Ö.\n\n"
        f"‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=create_main_menu_keyboard()
    )
    await message.bot.send_message(CHANNEL_ID, f"üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: {message.from_user.first_name} (ID: {user_id})")
    await GameState.main_menu.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä—ã "–¢–≤–∏—Å—Ç"
@router.callback_query(lambda c: c.data == "play_twist")
async def play_twist_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GameState.bet_amount)
    await callback.message.edit_text(
        "üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
        "–¶–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.\n"
        "–ö–∞–∂–¥—ã–π —Å–ø–∏–Ω —Å—Ç–æ–∏—Ç 10% –æ—Ç –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞–Ω–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.\n\n"
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]]))
    await callback.answer()

@router.message(GameState.bet_amount)
async def process_twist_bet(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        bet_amount = float(message.text)
        current_balance = get_balance(user_id)

        if bet_amount <= 0:
            await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        if bet_amount > current_balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        twist_state = {
            'bet_amount': bet_amount,
            'game_bank': 0,
            'spins_made': 0,
            'anchor_count': 0,
            'star_count': 0,
            'shell_count': 0,
            'last_symbol': None,
            'result_text': ""
        }

        await state.update_data(twist_state=twist_state)
        await state.set_state(GameState.twist_game)

        await message.answer(
            f"üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
            f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
            f"üè¶ –ë–∞–Ω–∫ –∏–≥—Ä—ã: ${twist_state['game_bank']:.2f}\n\n"
            f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
            f"üêö: {twist_state['shell_count']}/7\n"
            f"‚≠êÔ∏è: {twist_state['star_count']}/5\n"
            f"‚öìÔ∏è: {twist_state['anchor_count']}/3\n\n"
            f"üîÑ <b>–ù–∞–∂–º–∏—Ç–µ '–°–ø–∏–Ω', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>\n"
            f"üí∞ –°–ø–∏–Ω —Å—Ç–æ–∏—Ç: ${bet_amount * 0.1:.2f}",
            reply_markup=create_twist_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –¢–≤–∏—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "play_twist_again")
async def play_twist_again_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GameState.bet_amount)
    await callback.message.edit_text(
        "üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
        "–¶–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.\n"
        "–ö–∞–∂–¥—ã–π —Å–ø–∏–Ω —Å—Ç–æ–∏—Ç 10% –æ—Ç –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞–Ω–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.\n\n"
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]]))
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("twist_"))
async def twist_callback_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        twist_state = data.get('twist_state', {})

        if callback.data == "twist_spin":
            bet_amount = twist_state.get('bet_amount', 0)
            current_balance = get_balance(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏–Ω–æ–º
            if current_balance < bet_amount:
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã!", show_alert=True)
                return

            # –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞
            update_balance(callback.from_user.id, -bet_amount)
            twist_state['spins_made'] = twist_state.get('spins_made', 0) + 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ä—è–¥
            anchors = twist_state.get('anchor_count', 0)
            stars = twist_state.get('star_count', 0)
            shells = twist_state.get('shell_count', 0)

            completed_rows = []
            if anchors >= 3:
                completed_rows.append('anchor')
            if stars >= 5:
                completed_rows.append('star')
            if shells >= 7:
                completed_rows.append('shell')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
            if completed_rows:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, —Å–º–∞–π–ª–∏–∫ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å
                symbols = ['‚öìÔ∏è', '‚≠êÔ∏è', 'üêö', 'üíÄ', 'üí©', 'üí∏']
                weights = [10, 10, 10, 40, 50, 15]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å —Å–º–∞–π–ª–∏–∫–∞
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤, —Å–º–∞–π–ª–∏–∫ –ù–ï –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å
                symbols = ['‚öìÔ∏è', '‚≠êÔ∏è', 'üêö', 'üíÄ', 'üí©']

                # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                total_symbols = anchors + stars + shells

                if total_symbols >= 3:
                    weights = [8, 8, 8, 50, 60]  # –ü–æ—Å–ª–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ - –±–æ–ª—å—à–µ –Ω–µ–≥–∞—Ç–∏–≤–∞
                elif total_symbols >= 1:
                    weights = [15, 15, 15, 35, 45]  # –ü–æ—Å–ª–µ 1 —Å–∏–º–≤–æ–ª–∞ - —É–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥–∫—Ä—É—Ç
                else:
                    weights = [25, 25, 25, 25, 30]  # –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞

            symbol = random.choices(symbols, weights=weights)[0]

            result = ""
            bank_change = 0

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            if symbol == '‚öìÔ∏è':
                twist_state['anchor_count'] = twist_state.get('anchor_count', 0) + 1
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–∫–æ—Ä–µ–π
                anchor_coeffs = [1.6, 5, 10.5]  # 1, 2, 3 —è–∫–æ—Ä—è
                current_anchors = twist_state['anchor_count']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
                if current_anchors <= len(anchor_coeffs):
                    if current_anchors < 3:
                        coeff = anchor_coeffs[current_anchors - 1]
                        bank_add = bet_amount * coeff
                        twist_state['game_bank'] = twist_state.get('game_bank', 0) + bank_add
                        bank_change = bank_add
                        result = f"‚öìÔ∏è –Ø–∫–æ—Ä—å! x{coeff} = +${bank_add:.2f} –≤ –±–∞–Ω–∫ ({current_anchors}/3)"
                    else:
                        result = f"‚öìÔ∏è –Ø–∫–æ—Ä—å! 3 —è–∫–æ—Ä—è —Å–æ–±—Ä–∞–Ω—ã! –ù—É–∂–µ–Ω üí∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è x10.5"
                else:
                    result = f"‚öìÔ∏è –Ø–∫–æ—Ä—å! ({current_anchors}/3)"

            elif symbol == '‚≠êÔ∏è':
                twist_state['star_count'] = twist_state.get('star_count', 0) + 1
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∑–≤–µ–∑–¥
                star_coeffs = [2.5, 8, 16.5, 28.5, 45]  # 1, 2, 3, 4, 5 –∑–≤–µ–∑–¥
                current_stars = twist_state['star_count']

                if current_stars <= len(star_coeffs):
                    if current_stars < 5:
                        coeff = star_coeffs[current_stars - 1]
                        bank_add = bet_amount * coeff
                        twist_state['game_bank'] = twist_state.get('game_bank', 0) + bank_add
                        bank_change = bank_add
                        result = f"‚≠êÔ∏è –ó–≤–µ–∑–¥–∞! x{coeff} = +${bank_add:.2f} –≤ –±–∞–Ω–∫ ({current_stars}/5)"
                    else:
                        result = f"‚≠êÔ∏è –ó–≤–µ–∑–¥–∞! 5 –∑–≤–µ–∑–¥ —Å–æ–±—Ä–∞–Ω—ã! –ù—É–∂–µ–Ω üí∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è x45"
                else:
                    result = f"‚≠êÔ∏è –ó–≤–µ–∑–¥–∞! ({current_stars}/5)"

            elif symbol == 'üêö':
                twist_state['shell_count'] = twist_state.get('shell_count', 0) + 1
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∫—É—à–µ–∫
                shell_coeffs = [4, 13, 28.5, 53, 88, 137.5, 205]  # 1, 2, 3, 4, 5, 6, 7 —Ä–∞–∫—É—à–µ–∫
                current_shells = twist_state['shell_count']

                if current_shells <= len(shell_coeffs):
                    if current_shells < 7:
                        coeff = shell_coeffs[current_shells - 1]
                        bank_add = bet_amount * coeff
                        twist_state['game_bank'] = twist_state.get('game_bank', 0) + bank_add
                        bank_change = bank_add
                        result = f"üêö –†–∞–∫—É—à–∫–∞! x{coeff} = +${bank_add:.2f} –≤ –±–∞–Ω–∫ ({current_shells}/7)"
                    else:
                        result = f"üêö –†–∞–∫—É—à–∫–∞! 7 —Ä–∞–∫—É—à–µ–∫ —Å–æ–±—Ä–∞–Ω—ã! –ù—É–∂–µ–Ω üí∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è x205"
                else:
                    result = f"üêö –†–∞–∫—É—à–∫–∞! ({current_shells}/7)"

            elif symbol == 'üí∏':
                # –î–µ–Ω–µ–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
                total_multiplier = 1
                bonus_details = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
                anchors = twist_state.get('anchor_count', 0)
                if anchors >= 3:
                    total_multiplier *= 10.5
                    bonus_details.append(f"‚öìÔ∏èx3 = x10.5")

                stars = twist_state.get('star_count', 0)
                if stars >= 5:
                    total_multiplier *= 45
                    bonus_details.append(f"‚≠êÔ∏èx5 = x45")

                shells = twist_state.get('shell_count', 0)
                if shells >= 7:
                    total_multiplier *= 205
                    bonus_details.append(f"üêöx7 = x205")

                if bonus_details:
                    mega_win = bet_amount * total_multiplier
                    twist_state['game_bank'] = twist_state.get('game_bank', 0) + mega_win
                    bank_change = mega_win
                    result = f"üí∏ –ú–ï–ì–ê –í–´–ò–ì–†–´–®! {' + '.join(bonus_details)} = x{total_multiplier}! +${mega_win:.2f}"
                else:
                    # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Å–º–∞–π–ª–∏–∫ –≤—ã–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö
                    result = f"üí∏ –î–µ–Ω–µ–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫! –û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"

            elif symbol == 'üíÄ':
                # –ß–µ—Ä–µ–ø - –æ—Ç–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–∞–∑–∞–¥ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞
                bank_loss = 0

                # –Ø–∫–æ—Ä—è - —É–±–∏—Ä–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
                if twist_state.get('anchor_count', 0) > 0:
                    current_anchors = twist_state['anchor_count']
                    twist_state['anchor_count'] -= 1

                    # –ï—Å–ª–∏ –±—ã–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º, –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ –∏–∑ –±–∞–Ω–∫–∞
                    anchor_coeffs = [1.6, 5, 10.5]
                    if current_anchors <= len(anchor_coeffs):
                        lost_coeff = anchor_coeffs[current_anchors - 1]
                        bank_loss += bet_amount * lost_coeff

                # –ó–≤–µ–∑–¥—ã - —É–±–∏—Ä–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
                if twist_state.get('star_count', 0) > 0:
                    current_stars = twist_state['star_count']
                    twist_state['star_count'] -= 1

                    # –ï—Å–ª–∏ –±—ã–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º, –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ –∏–∑ –±–∞–Ω–∫–∞
                    star_coeffs = [2.5, 8, 16.5, 28.5, 45]
                    if current_stars <= len(star_coeffs):
                        lost_coeff = star_coeffs[current_stars - 1]
                        bank_loss += bet_amount * lost_coeff

                # –†–∞–∫—É—à–∫–∏ - —É–±–∏—Ä–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
                if twist_state.get('shell_count', 0) > 0:
                    current_shells = twist_state['shell_count']
                    twist_state['shell_count'] -= 1

                    # –ï—Å–ª–∏ –±—ã–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º, –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ –∏–∑ –±–∞–Ω–∫–∞
                    shell_coeffs = [4, 13, 28.5, 53, 88, 137.5, 205]
                    if current_shells <= len(shell_coeffs):
                        lost_coeff = shell_coeffs[current_shells - 1]
                        bank_loss += bet_amount * lost_coeff

                # –í—ã—á–∏—Ç–∞–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞
                twist_state['game_bank'] = max(0, twist_state.get('game_bank', 0) - bank_loss)
                bank_change = -bank_loss

                if bank_loss > 0:
                    result = f"üíÄ –ß–µ—Ä–µ–ø! –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–∫–∏–Ω—É—Ç—ã –Ω–∞ 1 —à–∞–≥ –Ω–∞–∑–∞–¥. –ü–æ—Ç–µ—Ä—è–Ω–æ ${bank_loss:.2f} –∏–∑ –±–∞–Ω–∫–∞!"
                else:
                    result = f"üíÄ –ß–µ—Ä–µ–ø! –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–∫–∏–Ω—É—Ç—ã –Ω–∞ 1 —à–∞–≥ –Ω–∞–∑–∞–¥"

            elif symbol == 'üí©':
                # –ö–∞–∫–∞—à–∫–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                result = f"üí© –ö–∞–∫–∞—à–∫–∞! –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"

            await state.update_data(twist_state=twist_state)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            current_balance_after = get_balance(callback.from_user.id)
            game_bank = twist_state.get('game_bank', 0)

            bank_info = ""
            if bank_change > 0:
                bank_info = f"üí∞ –í –±–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${bank_change:.2f}\n"
            elif bank_change < 0:
                bank_info = f"üí∏ –ò–∑ –±–∞–Ω–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${abs(bank_change):.2f}\n"

            keyboard = create_twist_keyboard()

            # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É —Å–Ω–∏–∑—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
            frame_top = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            frame_middle = f"‚îÇ    üé∞ –í–´–ü–ê–õ: {symbol}    ‚îÇ"
            frame_bottom = "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

            symbol_frame = f"```\n{frame_top}\n{frame_middle}\n{frame_bottom}\n```"

            new_text = (
                f"üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
                f"{result}\n\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${current_balance_after:.2f}\n"
                f"üè¶ –ë–∞–Ω–∫ –∏–≥—Ä—ã: ${game_bank:.2f}\n"
                f"{bank_info}\n"
                f"üìä <b>–¢–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
                f"üêöüêöüêöüêöüêöüêöüêöüí∏ = x4¬∑x13¬∑x28.5¬∑x53¬∑x88¬∑x137.5¬∑x205\n"
                f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èüí∏ = x2.5¬∑x8¬∑x16.5¬∑x28.5¬∑x45\n"
                f"‚öìÔ∏è‚öìÔ∏è‚öìÔ∏èüí∏ = x1.6¬∑x5¬∑x10.5\n"
                f"üíÄ –ß–µ—Ä–µ–ø: -1 —à–∞–≥ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏\n"
                f"üí© –ö–∞–∫–∞—à–∫–∞: –Ω–∏—á–µ–≥–æ\n\n"
                f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∫—Ü–∏–π:</b>\n"
                f"üêö: {twist_state.get('shell_count', 0)}/7\n"
                f"‚≠êÔ∏è: {twist_state.get('star_count', 0)}/5\n"
                f"‚öìÔ∏è: {twist_state.get('anchor_count', 0)}/3\n\n"
                f"üîÑ –°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω: ${bet_amount:.2f}\n\n"
                f"{symbol_frame}"
            )

            try:
                await callback.message.edit_text(new_text, reply_markup=keyboard)
            except Exception as e:
                if "message is not modified" in str(e):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await callback.answer()
                else:
                    raise e

        elif callback.data == "twist_cashout":
            game_bank = twist_state.get('game_bank', 0)

            if game_bank > 0:
                update_balance(callback.from_user.id, game_bank)
                update_game_stats(callback.from_user.id, "–¢–≤–∏—Å—Ç", game_bank)

                await callback.message.edit_text(
                    f"üí∞ <b>–ë–∞–Ω–∫ –∑–∞–±—Ä–∞–Ω!</b>\n\n"
                    f"üè¶ –ó–∞–±—Ä–∞–Ω–æ –∏–∑ –±–∞–Ω–∫–∞: ${game_bank:.2f}\n"
                    f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_twist_again")],
                            [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                    )
                )
            else:
                bet_amount = twist_state.get('bet_amount', 0)
                update_game_stats(callback.from_user.id, "–¢–≤–∏—Å—Ç", 0)

                await callback.message.edit_text(
                    f"‚ùå <b>–ë–∞–Ω–∫ –ø—É—Å—Ç!</b>\n\n"
                    f"üè¶ –í –±–∞–Ω–∫–µ –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞\n"
                    f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                    f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_twist_again")],
                            [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                    )
                )

            await state.set_state(GameState.main_menu)

        elif callback.data == "twist_exit":
            game_bank = twist_state.get('game_bank', 0)
            bet_amount = twist_state.get('bet_amount', 0)

            update_game_stats(callback.from_user.id, "–¢–≤–∏—Å—Ç", 0)

            await callback.message.edit_text(
                f"‚ùå <b>–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞</b>\n\n"
                f"üè¶ –ë–∞–Ω–∫ –∏–≥—Ä—ã —Å–≥–æ—Ä–µ–ª: ${game_bank:.2f}\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_twist_again")],
                        [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                )
            )
            await state.set_state(GameState.main_menu)

        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç–≤–∏—Å—Ç–µ: {e}")
        if "message is not modified" not in str(e):
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            await callback.answer()

async def play_bowling_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        while True:  # –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–∏—á—å–µ–π
            # –ö–∏–¥–∞–µ–º –∫–µ–≥–ª–∏ –∏–≥—Ä–æ–∫–∞
            user_bowling = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≥")
            await asyncio.sleep(4)
            user_pins = user_bowling.dice.value

            # –ö–∏–¥–∞–µ–º –∫–µ–≥–ª–∏ –±–æ—Ç–∞
            await bot.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç –∫–∏–¥–∞–µ—Ç...")
            bot_bowling = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≥")
            await asyncio.sleep(4)
            bot_pins = bot_bowling.dice.value

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é
            if user_pins == bot_pins:
                await bot.send_message(CHANNEL_ID, "ü§ù –ù–∏—á—å—è! –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...")
                await asyncio.sleep(2)
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            actual_result = "win" if user_pins > bot_pins else "loss"
            win = choice == actual_result
            break

        if win:
            win_amount = bet_amount * 1.8
            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–ë–æ—É–ª–∏–Ω–≥", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –±–æ—É–ª–∏–Ω–≥\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"
        else:
            update_game_stats(user.id, "–ë–æ—É–ª–∏–Ω–≥", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bet_id = add_bet_to_history(user.id, 'bowling', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé≥ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –ò–≥—Ä–æ–∫: {user_pins} –∫–µ–≥–ª–µ–π | ü§ñ –ë–æ—Ç: {bot_pins} –∫–µ–≥–ª–µ–π\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé≥ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –ò–≥—Ä–æ–∫: {user_pins} –∫–µ–≥–ª–µ–π | ü§ñ –ë–æ—Ç: {bot_pins} –∫–µ–≥–ª–µ–π\n"
                f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'bowling' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≥ –ò–≥—Ä–∞: –ë–æ—É–ª–∏–Ω–≥\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≥ –ò–≥—Ä–∞: –ë–æ—É–ª–∏–Ω–≥\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—É–ª–∏–Ω–≥–µ: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≥")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—É–ª–∏–Ω–≥–µ: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ë–æ—É–ª–∏–Ω–≥\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_dice_duel_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        while True:  # –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–∏—á—å–µ–π
            user_dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
            await asyncio.sleep(4)
            user_roll = user_dice.dice.value

            await bot.send_message(CHANNEL_ID, "ü§ñ –ë–æ—Ç –∫–∏–¥–∞–µ—Ç...")
            bot_dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
            await asyncio.sleep(4)
            bot_roll = bot_dice.dice.value

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é
            if user_roll == bot_roll:
                await bot.send_message(CHANNEL_ID, "ü§ù –ù–∏—á—å—è! –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...")
                await asyncio.sleep(2)
                continue

            actual_result = "win" if user_roll > bot_roll else "loss"
            win = choice == actual_result
            break

        if win:
            win_amount = bet_amount * 1.8
            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–ö—É–±—ã (–¥—É—ç–ª—å)", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã (–¥—É—ç–ª—å)\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        else:
            update_game_stats(user.id, "–ö—É–±—ã (–¥—É—ç–ª—å)", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üò¢ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        bet_id = add_bet_to_history(user.id, 'dice_duel', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –ò–≥—Ä–æ–∫: {user_roll} | ü§ñ –ë–æ—Ç: {bot_roll}\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending dice duel photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –ò–≥—Ä–æ–∫: {user_roll} | ü§ñ –ë–æ—Ç: {bot_roll}\n"
                f"üé≤ –í—ã–±–æ—Ä: {'üèÜ –ü–æ–±–µ–¥–∞' if choice == 'win' else 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'dice_duel' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã (–¥—É—ç–ª—å)\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã (–¥—É—ç–ª—å)\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö (–¥—É—ç–ª—å): {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö (–¥—É—ç–ª—å): {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö—É–±—ã (–¥—É—ç–ª—å)\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_basketball_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        basketball = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üèÄ")
        await asyncio.sleep(4)
        basketball_value = basketball.dice.value

        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–∞—Ä—Ç—Å (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        actual_result = "hit" if basketball_value >= 4 else "miss"
        win = choice == actual_result

        if win:
            coeff = 1.8 if choice == 'hit' else 1.3
            win_amount = bet_amount * coeff
            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")
            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{coeff})"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        else:
            update_game_stats(user.id, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üòî <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        bet_id = add_bet_to_history(user.id, 'basketball', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üèÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if actual_result == 'hit' else '‚ùå –ú–∏–º–æ'} ({basketball_value})\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if choice == 'hit' else '‚ùå –ú–∏–º–æ'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending basketball photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üèÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if actual_result == 'hit' else '‚ùå –ú–∏–º–æ'} ({basketball_value})\n"
                f"üé≤ –í—ã–±–æ—Ä: {'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ' if choice == 'hit' else '‚ùå –ú–∏–º–æ'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'basketball' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üèÄ –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üèÄ –ò–≥—Ä–∞: –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üèÄ")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_dice_higher_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        dice_value = dice.dice.value

        actual_result = "higher" if dice_value > 3 else "lower"
        win = choice == actual_result

        if win:
            win_amount = bet_amount * 1.8
            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")
            result_text = f"üèÜ –£–≥–∞–¥–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"
        else:
            update_game_stats(user.id, "–ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üíÄ –ù–µ —É–≥–∞–¥–∞–ª–∏! –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bet_id = add_bet_to_history(user.id, 'dice_higher', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3' if choice == 'higher' else '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending dice higher photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
                f"üé≤ –í—ã–±–æ—Ä: {'‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3' if choice == 'higher' else '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'dice_higher' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_dice_even_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        dice = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(4)
        dice_value = dice.dice.value

        actual_result = "even" if dice_value % 2 == 0 else "odd"
        win = choice == actual_result

        if win:
            win_amount = bet_amount * 1.8

            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –∫—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üèÜ –£–≥–∞–¥–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"
        else:
            update_game_stats(user.id, "–ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üíÄ –ù–µ —É–≥–∞–¥–∞–ª–∏! –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bet_id = add_bet_to_history(user.id, 'dice_even', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ' if choice == 'even' else '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending dice even photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}\n"
                f"üé≤ –í—ã–±–æ—Ä: {'2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ' if choice == 'even' else '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'dice_even' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö —á–µ—Ç/–Ω–µ—á–µ—Ç: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫—É–±–∞—Ö —á–µ—Ç/–Ω–µ—á–µ—Ç: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_triada_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        await bot.send_message(CHANNEL_ID, "üé≤ –ö–∏–¥–∞–µ–º 3 –∫—É–±–∏–∫–∞...")
        dice1 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)
        dice2 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)
        dice3 = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        await asyncio.sleep(2)

        dice_values = [dice1.dice.value, dice2.dice.value, dice3.dice.value]
        choice_num = int(choice)

        matches = dice_values.count(choice_num)
        coeff = 1.8 if matches == 1 else 2.4 if matches == 2 else 3.1 if matches == 3 else 0

        if coeff > 0:
            win_amount = bet_amount * coeff

            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–¢—Ä–∏–∞–¥–∞", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ —Ç—Ä–∏–∞–¥—É\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{coeff})"
        else:
            update_game_stats(user.id, "–¢—Ä–∏–∞–¥–∞", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üíÄ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bet_id = add_bet_to_history(user.id, 'triada', bet_amount, choice, "win" if coeff > 0 else "loss", win_amount if coeff > 0 else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if coeff > 0:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –ö—É–±–∏–∫–∏: {dice1.dice.value}, {dice2.dice.value}, {dice3.dice.value}\n"
                        f"üé≤ –í—ã–±–æ—Ä: {choice}\n"
                        f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n\n"
                        f"{'üéâ' if coeff > 0 else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending triada photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –ö—É–±–∏–∫–∏: {dice1.dice.value}, {dice2.dice.value}, {dice3.dice.value}\n"
                f"üé≤ –í—ã–±–æ—Ä: {choice}\n"
                f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n\n"
                f"{'üéâ' if coeff > 0 else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'triada' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if coeff > 0:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –¢—Ä–∏–∞–¥–∞\n"
                f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé≤ –ò–≥—Ä–∞: –¢—Ä–∏–∞–¥–∞\n"
                f"‚ú® –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∏–∞–¥–µ: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            for _ in range(3): # –ü–æ–ø—ã—Ç–∫–∞ 3 —Ä–∞–∑–∞
                await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé≤")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–∏–∞–¥–µ: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –¢—Ä–∏–∞–¥–∞\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return


async def play_darts_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        darts = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üéØ")
        await asyncio.sleep(4)
        darts_value = darts.dice.value

        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –¥–∞—Ä—Ç—Å (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        actual_result = "red" if darts_value in [2, 4, 6] else "white"
        win = choice == actual_result

        if win:
            win_amount = bet_amount * 1.8

            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–î–∞—Ä—Ç—Å", win_amount)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ –¥–∞—Ä—Ç—Å\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üèÜ –£–≥–∞–¥–∞–ª–∏! –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"
        else:
            update_game_stats(user.id, "–î–∞—Ä—Ç—Å", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üíÄ –ù–µ —É–≥–∞–¥–∞–ª–∏! –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bet_id = add_bet_to_history(user.id, 'darts', bet_amount, choice, "win" if win else "loss", win_amount if win else 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if actual_result == 'red' else '‚ö™ –ë–µ–ª–æ–µ'} ({darts_value})\n"
                        f"üé≤ –í—ã–±–æ—Ä: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if choice == 'red' else '‚ö™ –ë–µ–ª–æ–µ'}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending darts photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if actual_result == 'red' else '‚ö™ –ë–µ–ª–æ–µ'} ({darts_value})\n"
                f"üé≤ –í—ã–±–æ—Ä: {'üî¥ –ö—Ä–∞—Å–Ω–æ–µ' if choice == 'red' else '‚ö™ –ë–µ–ª–æ–µ'}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'darts' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == choice):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                f"üéØ –ò–≥—Ä–∞: –î–∞—Ä—Ç—Å\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üéØ –ò–≥—Ä–∞: –î–∞—Ä—Ç—Å\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ä—Ç—Å: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üéØ")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–∞—Ä—Ç—Å: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –î–∞—Ä—Ç—Å\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

async def play_slots_direct(bot: Bot, message, bet_amount: float, choice: str):
    user = message.from_user

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ—Ç–æ–≤
        await bot.send_message(
            CHANNEL_ID,
            f"üéÆ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞!</b>\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
            f"üéØ –ò–≥—Ä–∞: üé∞ –°–ª–æ—Ç—ã\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
            f"üé≤ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω!\n\n"
            f"üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É..."
        )

        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 1 —Å–ª–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–º–æ–¥–∑–∏
        await bot.send_message(CHANNEL_ID, "üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω...")
        slot = await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé∞")
        await asyncio.sleep(3)

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
        slot_value = slot.dice.value

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à - –∑–Ω–∞—á–µ–Ω–∏—è 22, 43, 64 (—Ç—Ä–æ–π–∫–∏)
        win = slot_value in [22, 43, 64]

        if win:
            win_amount = bet_amount * 3.5

            update_balance(user.id, win_amount)
            update_game_stats(user.id, "–°–ª–æ—Ç—ã", win_amount)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
            bet_id = add_bet_to_history(user.id, 'slots', bet_amount, 'spin', "win", win_amount)
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            try:
                stats = get_user_stats(user.id)
                if stats and stats.get('referrer_id'):
                    bonus = win_amount * 0.05  # 5%
                    if bonus >= 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å $0.01
                        add_referral_bonus(stats['referrer_id'], bonus)
                        try:
                            await bot.send_message(
                                stats['referrer_id'],
                                f"üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n"
                                f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç—ã\n"
                                f"üéÅ –í–∞—à –±–æ–Ω—É—Å: ${bonus:.2f} (5%)"
                            )
                        except:
                            pass
            except Exception as e:
                print(f"Error processing referral bonus: {e}")

            result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x3.5)"
        else:
            update_game_stats(user.id, "–°–ª–æ—Ç—ã", 0)
            cashback_amount = bet_amount * 0.06
            add_loss_to_cashback(user.id, bet_amount) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à–±–µ–∫
            result_text = f"üíÄ <b>–ü—Ä–æ–∏–≥—Ä—ã—à</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\nüí∞ –ö–µ—à–±–µ–∫ +6%: +${cashback_amount:.2f}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        bet_id = add_bet_to_history(user.id, 'slots', bet_amount, 'spin', "loss", 0)

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{(await bot.get_me()).username}?start=game")
            ]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            if win:
                image_path = "attached_assets/win_image.png"  # –ü–æ–±–µ–¥–∞
            else:
                image_path = "attached_assets/loss_image.png"  # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

            await bot.send_photo(
                CHANNEL_ID,
                photo=FSInputFile(image_path),
                caption=f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                        f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {slot_value}\n"
                        f"{'üé≤ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: ‚úÖ –î–∂–µ–∫–ø–æ—Ç!' if win else ''}\n\n"
                        f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending slots photo: {e}")
            # Fallback to text message
            await bot.send_message(
                CHANNEL_ID,
                f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã</b>\n\n"
                f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {slot_value}\n"
                f"{'üé≤ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: ‚úÖ –î–∂–µ–∫–ø–æ—Ç!' if win else ''}\n\n"
                f"{'üéâ' if win else 'üòî'} {result_text}",
                reply_markup=channel_keyboard,
                parse_mode='HTML'
            )

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        user_id = user.id
        if user_id in user_active_bets:
            for i, bet in enumerate(user_active_bets[user_id]):
                if (bet['game_type'] == 'slots' and 
                    bet['bet_amount'] == bet_amount and 
                    bet['choice'] == 'spin'):
                    user_active_bets[user_id].pop(i)
                    break

            if not user_active_bets[user_id]:
                del user_active_bets[user_id]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )

        if win:
            await bot.send_message(
                user.id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–∂–µ–∫–ø–æ—Ç–æ–º!</b>\n\n"
                f"üé∞ –ò–≥—Ä–∞: –°–ª–æ—Ç—ã\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {slot_value}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x3.5)\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )
        else:
            await bot.send_message(
                user.id,
                f"üòî <b>–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)</b>\n\n"
                f"üé∞ –ò–≥—Ä–∞: –°–ª–æ—Ç—ã\n"
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {slot_value}\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user.id):.2f}",
                reply_markup=bot_keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö: {e}")
        await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
            await bot.send_dice(chat_id=CHANNEL_ID, emoji="üé∞")
        except Exception as retry_error:
            print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö: {retry_error}")
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(user.id, bet_amount)
            await bot.send_message(user.id, 
                f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –°–ª–æ—Ç—ã\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞ ${bet_amount:.2f} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∏–≥—Ä
async def process_game_queue(bot: Bot):
    global is_game_running

    is_game_running = True

    while game_queue:
        bet_info = game_queue.pop(0)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            if bet_info['game_type'] != 'slots':
                game_names = {
                    'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
                    'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
                    'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
                    'dice_higher': 'üé≤ –ö—É–±—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
                    'dice_even': 'üé≤ –ö—É–±—ã —á–µ—Ç/–Ω–µ—á–µ—Ç',
                    'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
                    'darts': 'üéØ –î–∞—Ä—Ç—Å'
                }

                choice_texts = {
                    ('bowling', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
                    ('bowling', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
                    ('dice_duel', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
                    ('dice_duel', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
                    ('basketball', 'hit'): 'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ',
                    ('basketball', 'miss'): '‚ùå –ú–∏–º–æ',
                    ('dice_higher', 'higher'): '‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3',
                    ('dice_higher', 'lower'): '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4',
                    ('dice_even', 'even'): '2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ',
                    ('dice_even', 'odd'): '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ',
                    ('darts', 'red'): 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ',
                    ('darts', 'white'): '‚ö™ –ë–µ–ª–æ–µ'
                }

                game_name = game_names.get(bet_info['game_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
                choice_text = choice_texts.get((bet_info['game_type'], bet_info['choice']), str(bet_info['choice']))

                await bot.send_message(
                    CHANNEL_ID,
                    f"üéÆ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞!</b>\n\n"
                    f"üë§ –ò–≥—Ä–æ–∫: {bet_info['user'].first_name}\n"
                    f"üéØ –ò–≥—Ä–∞: {game_name}\n"
                    f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_info['bet_amount']:.2f}\n"
                    f"üé≤ –í—ã–±–æ—Ä: {choice_text}\n\n"
                    f"üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É..."
                )

                await asyncio.sleep(1)

            # –°–æ–∑–¥–∞–µ–º mock message –æ–±—ä–µ–∫—Ç
            class MockMessage:
                def __init__(self, user):
                    self.from_user = user

            mock_message = MockMessage(bet_info['user'])

            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–≥—Ä—ã
            await bet_info['game_function'](bot, mock_message, bet_info['bet_amount'], bet_info['choice'])

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
            await asyncio.sleep(3)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä—ã: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(bet_info['user'].id, bet_info['bet_amount'])
            await bot.send_message(
                bet_info['user'].id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ! –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
            )

    is_game_running = False