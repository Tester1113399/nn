from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import random
import json
import sqlite3
from aiogram.types import FSInputFile
from aiogram.types import BotCommand

from config import BOT_TOKEN
from db import (init_db, create_user, get_balance, update_balance, create_user_with_referrer,
             get_user_stats, update_game_stats, get_referral_info, add_referral_bonus,
             delete_user, add_withdrawal, add_bet_to_history, update_bet_result,
             add_deposit, update_deposit_status, get_deposit_by_invoice, get_user_bet_history,
             get_user_by_id, get_leaderboard_by_winnings, get_leaderboard_by_balance,
             init_cashback_table, add_loss_to_cashback, get_cashback_info, claim_cashback)
from aiogram.types import CallbackQuery
from cryptobot import crypto_bot
from db import add_deposit, update_deposit_status, get_deposit_by_invoice

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ games.py
from games import (
    play_bowling_direct, play_dice_duel_direct, play_basketball_direct,
    play_dice_higher_direct, play_dice_even_direct, play_triada_direct,
    play_darts_direct, play_slots_direct, process_game_queue,
    MINES_COEFFICIENTS, TOWER_COEFFICIENTS
)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

init_db()
init_cashback_table()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
CHANNEL_ID = "-1002816845887"
SUBSCRIPTION_CHANNEL = "@NNDICEWIN"

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–≤–æ–∫
game_queue = []
is_game_running = False

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_active_bets = {}

# –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞–≤–æ–∫)
user_bet_history = {}

class GameState(StatesGroup):
    main_menu = State()
    play_menu = State()
    profile = State()
    bot_games = State()
    channel_games = State()

    # –ò–≥—Ä—ã –≤ –±–æ—Ç–µ
    mines_setup = State()
    tower_setup = State()
    mines_playing = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ã
    tower_playing = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ –±–∞—à–Ω—é
    combination_game = State()
    twist_setup = State()
    twist_game = State()

    # –ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ
    channel_bowling = State()
    channel_basketball = State()
    channel_dice_duel = State()
    channel_dice_higher = State()
    channel_dice_even = State()
    channel_triada = State()
    channel_darts = State()
    channel_slots = State()

    # –°—Ç–∞–≤–∫–∏
    waiting_bet = State()
    change_bet_amount = State()

    # CryptoBot
    crypto_deposit = State()
    crypto_withdraw = State()

    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    admin_add_money = State()
    admin_delete_user = State()
    admin_check_balance = State()

    # –õ–∏–¥–µ—Ä–±–æ—Ä–¥
    leaderboard = State()

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—ç—à–±–µ–∫–∞
    viewing_history = State()
    viewing_cashback = State()

async def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=SUBSCRIPTION_CHANNEL, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def get_subscription_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/NNDICEWIN")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )
    return keyboard

def get_start_keyboard(has_active_bets=False):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    if has_active_bets:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="üí≥ –ö–æ—à–µ–ª–µ–∫"), KeyboardButton(text="üìä –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="üí≥ –ö–æ—à–µ–ª–µ–∫")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    return keyboard

def get_play_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∏–≥—Ä."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ñ –ò–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–µ")],
            [KeyboardButton(text="üí¨ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bot_games_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–≥—Ä –≤ –±–æ—Ç–µ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí£ –ú–∏–Ω—ã"), KeyboardButton(text="üèó –ë–∞—à–Ω—è")],
            [KeyboardButton(text="üå™ –¢–≤–∏—Å—Ç"), KeyboardButton(text="üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_channel_games_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–≥—Ä –≤ –∫–∞–Ω–∞–ª–µ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≥ –ë–æ—É–ª–∏–Ω–≥"), KeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª")],
            [KeyboardButton(text="üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)"), KeyboardButton(text="üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ")],
            [KeyboardButton(text="üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç"), KeyboardButton(text="üé≤ –¢—Ä–∏–∞–¥–∞")],
            [KeyboardButton(text="üéØ –î–∞—Ä—Ç—Å"), KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bet_input_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_basketball_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="‚ùå –ú–∏–º–æ (x1.3)")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_duel_choice_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±—ã (–¥—É—ç–ª—å)."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –ü–æ–±–µ–¥–∞ (x1.8)"), KeyboardButton(text="üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_higher_lower_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÜÔ∏è –ë–æ–ª—å—à–µ")],
            [KeyboardButton(text="‚¨áÔ∏è –ú–µ–Ω—å—à–µ")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_dice_even_odd_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã —á–µ—Ç/–Ω–µ—á–µ—Ç."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ"), KeyboardButton(text="1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_triada_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã —Ç—Ä–∏–∞–¥–∞."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"), KeyboardButton(text="3Ô∏è‚É£")],
            [KeyboardButton(text="4Ô∏è‚É£"), KeyboardButton(text="5Ô∏è‚É£"), KeyboardButton(text="6Ô∏è‚É£")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bowling_choice_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –±–æ—É–ª–∏–Ω–≥."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –ü–æ–±–µ–¥–∞ (x1.8)"), KeyboardButton(text="üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_darts_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –¥–∞—Ä—Ç—Å."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x1.8)"), KeyboardButton(text="‚ö™ –ë–µ–ª–æ–µ (x1.8)")],
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_mines_count_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="2 –º–∏–Ω—ã"), KeyboardButton(text="3 –º–∏–Ω—ã"), KeyboardButton(text="4 –º–∏–Ω—ã")],
            [KeyboardButton(text="5 –º–∏–Ω"), KeyboardButton(text="6 –º–∏–Ω"), KeyboardButton(text="7 –º–∏–Ω")],
            [KeyboardButton(text="8 –º–∏–Ω"), KeyboardButton(text="9 –º–∏–Ω"), KeyboardButton(text="10 –º–∏–Ω")],
            [KeyboardButton(text="11 –º–∏–Ω"), KeyboardButton(text="12 –º–∏–Ω"), KeyboardButton(text="13 –º–∏–Ω")],
            [KeyboardButton(text="14 –º–∏–Ω"), KeyboardButton(text="15 –º–∏–Ω"), KeyboardButton(text="16 –º–∏–Ω")],
            [KeyboardButton(text="17 –º–∏–Ω"), KeyboardButton(text="18 –º–∏–Ω"), KeyboardButton(text="19 –º–∏–Ω")],
            [KeyboardButton(text="20 –º–∏–Ω"), KeyboardButton(text="21 –º–∏–Ω–∞"), KeyboardButton(text="22 –º–∏–Ω—ã")],
            [KeyboardButton(text="23 –º–∏–Ω—ã"), KeyboardButton(text="24 –º–∏–Ω—ã")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_tower_mines_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–º–± –≤ –±–∞—à–Ω–µ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –±–æ–º–±–∞"), KeyboardButton(text="2 –±–æ–º–±—ã")],
            [KeyboardButton(text="3 –±–æ–º–±—ã"), KeyboardButton(text="4 –±–æ–º–±—ã")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_combination_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –∫–æ–º–±–∏–Ω–∞—Ü–∏—è."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def add_to_bet_history(user_id, game_type, bet_amount, choice):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_bet_history:
        user_bet_history[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ –Ω–∞—á–∞–ª–æ (–Ω–µ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
    user_bet_history[user_id].insert(0, {
        'game_type': game_type,
        'bet_amount': bet_amount,
        'choice': choice
    })

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞–≤–æ–∫
    user_bet_history[user_id] = user_bet_history[user_id][:5]

def add_bet_amount_to_history(user_id, amount):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    history = get_user_bet_history(user_id, 20) # –£–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—É–º–º

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—É–º–º—ã
    temp_bet = {
        'game_type': 'amount_only',
        'bet_amount': amount,
        'choice': 'amount'
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å—É–º–º—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
    if not user_bet_history.get(user_id) or user_bet_history[user_id][0]['bet_amount'] != amount:
        if user_id not in user_bet_history:
            user_bet_history[user_id] = []
        user_bet_history[user_id].insert(0, temp_bet)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        user_bet_history[user_id] = user_bet_history[user_id][:5]

def get_bet_amounts_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å—É–º–º–∞–º–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    history = get_user_bet_history(user_id, 20)

    if not history:
        return InlineKeyboardMarkup(inline_keyboard=[])

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 3)
    amounts = []
    seen_amounts = set()

    for game_type, bet_amount, choice, result, win_amount, timestamp in history:
        if bet_amount not in seen_amounts and len(amounts) < 3:
            amounts.append(bet_amount)
            seen_amounts.add(bet_amount)

    if not amounts:
        return InlineKeyboardMarkup(inline_keyboard=[])

    keyboard = []
    for amount in amounts:
        keyboard.append([InlineKeyboardButton(
            text=f"üí∞ {amount} $",
            callback_data=f"quick_amount_{amount}"
        )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_leaderboard_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data="leaderboard_winnings_all")],
            [InlineKeyboardButton(text="üí∞ –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data="leaderboard_balance")],
            [
                InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="leaderboard_winnings_day"),
                InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="leaderboard_winnings_week"),
                InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="leaderboard_winnings_month")
            ]
        ]
    )
    return keyboard

def get_quick_bet_keyboard(user_id, current_game_type=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏."""
    if user_id not in user_bet_history or not user_bet_history[user_id]:
        return InlineKeyboardMarkup(inline_keyboard=[])

    keyboard = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    history = user_bet_history[user_id]
    if current_game_type:
        # –î–ª—è –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã
        channel_games = ['bowling', 'dice_duel', 'basketball', 'dice_higher', 'dice_even', 'triada', 'darts']
        if current_game_type in channel_games:
            history = [bet for bet in history if bet['game_type'] in channel_games]
        else:
            # –î–ª—è –±–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç–æ–≤—ã–µ –∏–≥—Ä—ã
            history = [bet for bet in history if bet['game_type'] == current_game_type]

    if not history:
        return InlineKeyboardMarkup(inline_keyboard=[])

    game_names = {
        'bowling': 'üé≥',
        'dice_duel': 'üé≤',
        'basketball': 'üèÄ',
        'dice_higher': 'üé≤‚¨ÜÔ∏è',
        'dice_even': 'üé≤‚ö™',
        'triada': 'üé≤üíé',
        'darts': 'üéØ',
        'mines': 'üí£',
        'tower': 'üèó'
    }

    choice_texts = {
        ('bowling', 'win'): '–ü–æ–±–µ–¥–∞',
        ('bowling', 'loss'): '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
        ('dice_duel', 'win'): '–ü–æ–±–µ–¥–∞',
        ('dice_duel', 'loss'): '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
        ('basketball', 'hit'): '–ü–æ–ø–∞–¥–∞–Ω–∏–µ',
        ('basketball', 'miss'): '–ú–∏–º–æ',
        ('dice_higher', 'higher'): '–ë–æ–ª—å—à–µ 3',
        ('dice_higher', 'lower'): '–ú–µ–Ω—å—à–µ 4',
        ('dice_even', 'even'): '–ß–µ—Ç–Ω–æ–µ',
        ('dice_even', 'odd'): '–ù–µ—á–µ—Ç–Ω–æ–µ',
        ('darts', 'red'): '–ö—Ä–∞—Å–Ω–æ–µ',
        ('darts', 'white'): '–ë–µ–ª–æ–µ'
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
    seen = set()
    unique_history = []
    for bet in history:
        # –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –∫–ª—é—á –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        bet_key = (bet['game_type'], bet['bet_amount'], bet['choice'])
        if bet_key not in seen:
            seen.add(bet_key)
            unique_history.append(bet)
        if len(unique_history) >= 3:
            break

    for i, bet in enumerate(unique_history):
        game_icon = game_names.get(bet['game_type'], 'üéÆ')

        if bet['game_type'] in ['mines', 'tower']:
            if bet['game_type'] == 'mines':
                text = f"{game_icon} {bet['bet_amount']}$ | {bet['choice']} –º–∏–Ω"
            else:
                text = f"{game_icon} {bet['bet_amount']}$ | {bet['choice']} –±–æ–º–±"
        elif bet['game_type'] == 'triada':
            text = f"{game_icon} {bet['bet_amount']}$ | —á–∏—Å–ª–æ {bet['choice']}"
        else:
            choice_text = choice_texts.get((bet['game_type'], bet['choice']), str(bet['choice']))
            text = f"{game_icon} {bet['bet_amount']}$ | {choice_text}"

        callback_data = f"quick_bet_{i}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_mines_field(mines_count):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ã."""
    field = [[0 for _ in range(5)] for _ in range(5)]

    # –†–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    mine_positions = set()
    while len(mine_positions) < mines_count:
        row = random.randint(0, 4)
        col = random.randint(0, 4)
        mine_positions.add((row, col))

    for row, col in mine_positions:
        field[row][col] = 1  # 1 = –º–∏–Ω–∞

    return field

def create_tower_keyboard(level, bombs_count):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∞—à–Ω–∏."""
    if level >= 6:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à")]],
            resize_keyboard=True
        )

    total_cells = 4 - bombs_count
    keyboard_rows = []

    for i in range(total_cells + bombs_count):
        cell_text = f"üéÅ –°–µ–π—Ñ {i+1}"
        keyboard_rows.append([KeyboardButton(text=cell_text)])

    keyboard_rows.append([KeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à")])
    keyboard_rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True
    )

def create_mines_inline_keyboard(mines_count, opened_cells, current_coeff, clicks_count=0):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ã."""
    keyboard = []
    field = create_mines_field(mines_count)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (—Å 4 —Ä—è–¥–∞ –¥–æ 0)
    for i in range(4, -1, -1):
        row_buttons = []
        for j in range(5):
            if (i, j) in opened_cells:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
                is_mine = False
                for mine_row, mine_col in data.get('mines_positions', []):
                    if i == mine_row and j == mine_col:
                        is_mine = True
                        break

                if is_mine:
                    row_buttons.append(InlineKeyboardButton(text="üí£", callback_data=f"mine_{i}_{j}"))
                else:
                    row_buttons.append(InlineKeyboardButton(text="üíé", callback_data=f"mine_{i}_{j}"))
            else:
                row_buttons.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"mine_{i}_{j}"))
        keyboard.append(row_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å" –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
    if clicks_count > 0:
        keyboard.append([
            InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å {current_coeff}x", callback_data="mines_cash_out")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ x0", callback_data="mines_exit")
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_twist_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –¢–≤–∏—Å—Ç."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="twist_spin")],
            [InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫", callback_data="twist_cashout")],
            [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="twist_exit")]
        ]
    )
    return keyboard

def create_tower_inline_keyboard(tower_mines, opened_levels, current_level):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –ë–∞—à–Ω—è."""
    keyboard = []

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞—à–Ω—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (—Å 5 —É—Ä–æ–≤–Ω—è –¥–æ 0) - 6 —É—Ä–æ–≤–Ω–µ–π –≤—Å–µ–≥–æ
    for level in range(5, -1, -1):
        row = []
        for cell in range(5):
            if level < current_level:
                # –£—Ä–æ–≤–µ–Ω—å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if any(ol[0] == level for ol in opened_levels):
                    # –ù–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —è—á–µ–π–∫—É –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
                    safe_cell = next(ol[1] for ol in opened_levels if ol[0] == level)
                    if cell == safe_cell:
                        row.append(InlineKeyboardButton(text="üíé", callback_data=f"tower_passed_{level}_{cell}"))
                    else:
                        row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"tower_passed_{level}_{cell}"))
                else:
                    row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"tower_passed_{level}_{cell}"))
            elif level == current_level:
                # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
                row.append(InlineKeyboardButton(text="‚¨ú", callback_data=f"tower_{level}_{cell}"))
            else:
                # –ë—É–¥—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                row.append(InlineKeyboardButton(text="‚¨õ", callback_data=f"tower_disabled_{level}_{cell}"))
        keyboard.append(row)

    if current_level > 0:
        coeffs = TOWER_COEFFICIENTS[tower_mines]
        current_coeff = coeffs[current_level - 1] if current_level - 1 < len(coeffs) else coeffs[-1]
        keyboard.append([
            InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å {current_coeff}x", callback_data="tower_cash_out")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ x0", callback_data="tower_exit")
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="üí∏ –ö—ç—à-–±–µ–∫"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)

    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}\n"
            f"üé∞ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        if start_param.startswith("ref"):
            try:
                referrer_id = int(start_param[3:])
                if referrer_id == message.from_user.id:
                    referrer_id = None  # –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
            except ValueError:
                pass

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
    from db import create_user_with_referrer, get_user_by_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = get_user_by_id(message.from_user.id)

    if not existing_user and referrer_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        referrer_exists = get_user_by_id(referrer_id)
        if referrer_exists:
            create_user_with_referrer(message.from_user.id, referrer_id)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await bot.send_message(
                    referrer_id,
                    f"üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                    f"üí∞ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5% —Å –µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π!"
                )
            except:
                pass
        else:
            create_user(message.from_user.id)
    elif not existing_user:
        create_user(message.from_user.id)

    balance = get_balance(message.from_user.id)
    await state.set_state(GameState.main_menu)

    welcome_text = f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NN | DICE WIN!</b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>"
    if referrer_id:
        welcome_text += f"\n\nüéÅ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"

    has_bets = message.from_user.id in user_active_bets and user_active_bets[message.from_user.id]
    await message.answer(welcome_text, reply_markup=get_start_keyboard(has_bets))

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, state: FSMContext):
    is_subscribed = await check_subscription(callback.from_user.id)

    if is_subscribed:
        create_user(callback.from_user.id)
        balance = get_balance(callback.from_user.id)
        await state.set_state(GameState.main_menu)
        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NN | DICE WIN!</b>\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>",
            reply_markup=None
        )
        await callback.message.answer(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_start_keyboard()
        )
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'", show_alert=True)

@router.message(F.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
async def play_menu_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.play_menu)
    await message.answer(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:</b>",
        reply_markup=get_play_menu_keyboard()
    )

@router.message(F.text == "ü§ñ –ò–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–µ")
async def bot_games_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.bot_games)
    await message.answer(
        "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n"
        "üí£ <b>–ú–∏–Ω—ã</b> - –Ω–∞–π–¥–∏—Ç–µ –∞–ª–º–∞–∑—ã, –∏–∑–±–µ–≥–∞—è –º–∏–Ω\n"
        "üèó <b>–ë–∞—à–Ω—è</b> - –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ –ø–æ —É—Ä–æ–≤–Ω—è–º\n"
        "üå™ <b>–¢–≤–∏—Å—Ç</b> - –∏–≥—Ä–∞ –Ω–∞ —Å–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤\n"
        "üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</b> - —É–≥–∞–¥–∞–π—Ç–µ —Ü–∏—Ñ—Ä—ã –≤ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–º —á–∏—Å–ª–µ",
        reply_markup=get_bot_games_keyboard()
    )

@router.message(F.text == "üí¨ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ")
async def channel_games_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.channel_games)
    await message.answer(
        "üí¨ <b>–ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
        "üé≥ <b>–ë–æ—É–ª–∏–Ω–≥</b> - –¥—É—ç–ª—å x1.8\n"
        "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b> - –ø–æ–ø–∞–¥–∞–Ω–∏–µ x1.8, –º–∏–º–æ x1.3\n"
        "üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b> - x1.8\n"
        "üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b> - x1.8\n"
        "üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b> - x1.8\n"
        "üé≤ <b>–¢—Ä–∏–∞–¥–∞</b> - 1 —Å–æ–≤–ø. x1.8, 2 —Å–æ–≤–ø. x2.4, 3 —Å–æ–≤–ø. x3.1\n"
        "üéØ <b>–î–∞—Ä—Ç—Å</b> - x1.8\n"
        "üé∞ <b>–°–ª–æ—Ç—ã</b> - 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö x3.5",
        reply_markup=get_channel_games_keyboard()
    )

@router.message(F.text == "üí≥ –ö–æ—à–µ–ª–µ–∫")
async def wallet_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—à–µ–ª—å–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    balance = get_balance(message.from_user.id)

    wallet_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        f"üí≥ <b>–ö–æ—à–µ–ª–µ–∫</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>\n\n"
        f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=wallet_keyboard
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.profile)
    balance = get_balance(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    first_name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == 1597157163:
        profile_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
                [KeyboardButton(text="üí∏ –ö—ç—à-–±–µ–∫"), KeyboardButton(text="üí∞ +$1")],
                [KeyboardButton(text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ ID"), KeyboardButton(text="üëÅ –ë–∞–ª–∞–Ω—Å –ø–æ ID")],
                [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    else:
        profile_keyboard = get_profile_keyboard()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = get_user_stats(message.from_user.id)
    if stats:
        favorite_game = f"{stats['favorite_game']} [{stats['favorite_game_count']}]"
        total_games = stats['total_games']
        biggest_win = stats['biggest_win']
        registration_date = stats['registration_date'][:10] if stats['registration_date'] else "20.10.2024"
    else:
        favorite_game = "–¢—Ä–∏–∞–¥–∞ [74]"
        total_games = 206
        biggest_win = 9
        registration_date = "20.10.2024"

    await message.answer(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üë§ –ò–º—è: {first_name}\n"
        f"üì± –ù–∏–∫: @{username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚î£ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {favorite_game}\n"
        f"‚î£ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: {total_games}\n"
        f"‚îó –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: ${biggest_win:.2f}\n\n"
        f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}",
        reply_markup=profile_keyboard
    )

@router.message(F.text == "üí∞ +$1")
async def add_dollar_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.from_user.id == 1597157163:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        create_user(message.from_user.id)
        update_balance(message.from_user.id, 1.0)
        new_balance = get_balance(message.from_user.id)
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: $1.00\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}"
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

@router.message(F.text == "üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ ID")
async def admin_add_money_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id == 1597157163:
        await state.set_state(GameState.admin_add_money)
        await message.answer(
            "üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ ID</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>ID –°–£–ú–ú–ê</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>123456789 50.00</code>",
            reply_markup=get_bet_input_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

@router.message(F.text == "üëÅ –ë–∞–ª–∞–Ω—Å –ø–æ ID")
async def admin_check_balance_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id == 1597157163:
        await state.set_state(GameState.admin_check_balance)
        await message.answer(
            "üëÅ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ ID</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:",
            reply_markup=get_bet_input_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def admin_delete_user_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id == 1597157163:
        await state.set_state(GameState.admin_delete_user)
        await message.answer(
            "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "‚Ä¢ –ë–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫\n"
            "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_bet_input_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

@router.message(GameState.admin_add_money)
async def process_admin_add_money(message: Message, state: FSMContext):
    if message.from_user.id != 1597157163:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID –°–£–ú–ú–ê")
            return

        user_id = int(parts[0])
        amount = float(parts[1])

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
        create_user(user_id)
        update_balance(user_id, amount)
        new_balance = get_balance(user_id)

        await message.answer(
            f"‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b>\n\n"
            f"üë§ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user_id}\n"
            f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${amount:.2f}\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                user_id,
                f"üéÅ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞!</b>\n\n"
                f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}\n\n"
                f"üé∞ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"
            )
        except:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")

        await state.set_state(GameState.profile)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—É–º–º–∞ - —á–∏—Å–ª–æ–º —Å —Ç–æ—á–∫–æ–π")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(GameState.admin_check_balance)
async def process_admin_check_balance(message: Message, state: FSMContext):
    if message.from_user.id != 1597157163:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return

    try:
        user_id = int(message.text.strip())

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = get_balance(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_stats = get_user_stats(user_id)

        if user_stats:
            await message.answer(
                f"üëÅ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {user_stats['total_games']}\n"
                f"üíé –û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏: ${user_stats['total_winnings']:.2f}\n"
                f"üèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: ${user_stats['biggest_win']:.2f}\n"
                f"üéØ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {user_stats['favorite_game']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_stats['registration_date'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            )
        else:
            await message.answer(
                f"üëÅ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"üÜî ID: {user_id}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )

        await state.set_state(GameState.profile)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(GameState.admin_delete_user)
async def process_admin_delete_user(message: Message, state: FSMContext):
    if message.from_user.id != 1597157163:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return

    try:
        user_id = int(message.text.strip())

        if user_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        balance = get_balance(user_id)

        if balance == 0:
            # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å
            pass

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from db import delete_user
        success = delete_user(user_id)

        if success:
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üë§ ID: {user_id}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –±—ã–ª: ${balance:.2f}\n\n"
                f"üóë –£–¥–∞–ª–µ–Ω—ã:\n"
                f"‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –∏ —Å—Ç–∞–≤–æ–∫\n"
                f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏\n\n"
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º"
            )

            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            try:
                await bot.send_message(
                    user_id,
                    f"üîÑ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        await state.set_state(GameState.profile)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(F.text == "üí∏ –ö—ç—à-–±–µ–∫")
async def cashback_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–µ—à–±–µ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    cashback_info = get_cashback_info(message.from_user.id)

    await message.answer(
        f"üí∏ <b>–ö—ç—à-–±–µ–∫ —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –∫–µ—à–±–µ–∫–∞: <b>${cashback_info['available_cashback']:.2f}</b>\n\n"
        f"üìä <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—ç—à-–±–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
        f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 6% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞\n"
        f"‚Ä¢ –ö–µ—à–±–µ–∫ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ $5.00\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n"
        f"üìà –û–±—â–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∏: ${cashback_info['total_losses']:.2f}\n\n"
        f"üí° –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ $5.00 –∫–µ—à–±–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å!"
    )



@router.message(F.text == "üìà –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫")
async def my_bets_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in user_active_bets or not user_active_bets[user_id]:
        await message.answer(
            "üìä <b>–ú–æ–∏ —Å—Ç–∞–≤–∫–∏</b>\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"
        )
        return

    bets_text = "üìä <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n\n"

    for i, bet in enumerate(user_active_bets[user_id], 1):
        game_names = {
            'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
            'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
            'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
            'dice_higher': 'üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
            'dice_even': 'üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç',
            'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
            'darts': 'üéØ –î–∞—Ä—Ç—Å'
        }

        choice_texts = {
            ('bowling', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
            ('bowling', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
            ('dice_duel', 'win'): 'üèÜ –ü–æ–±–µ–¥–∞',
            ('dice_duel', 'loss'): 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ',
            ('basketball', 'hit'): 'üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ',
            ('basketball', 'miss'): '‚ùå –ú–∏–º–æ',
            ('dice_higher', 'higher'): '‚¨ÜÔ∏è –ë–æ–ª—å—à–µ 3',
            ('dice_higher', 'lower'): '‚¨áÔ∏è –ú–µ–Ω—å—à–µ 4',
            ('dice_even', 'even'): '2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ',
            ('dice_even', 'odd'): '1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ',
            ('darts', 'red'): 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ',
            ('darts', 'white'): '‚ö™ –ë–µ–ª–æ–µ'
        }

        game_name = game_names.get(bet['game_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
        choice_text = choice_texts.get((bet['game_type'], bet['choice']), str(bet['choice']))

        bets_text += f"{i}. {game_name}\n"
        bets_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: ${bet['bet_amount']:.2f}\n"
        bets_text += f"   üé≤ –í—ã–±–æ—Ä: {choice_text}\n"
        bets_text += f"   üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {bet['position']}\n\n"

    await message.answer(bets_text)

@router.message(F.text == "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
async def leaderboard_handler(message: Message, state: FSMContext):
    await state.set_state(GameState.leaderboard)
    await message.answer(
        "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_leaderboard_keyboard()
    )

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referral_handler(message: Message, state: FSMContext):
    from db import get_referral_info

    referrals_count = get_referral_info(message.from_user.id)
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref{message.from_user.id}"

    await message.answer(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\nüí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% —Å –∫–∞–∂–¥–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"`{referral_link}`\n\n"
        f"üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
    )

@router.message(F.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
async def top_players_handler(message: Message, state: FSMContext):
    await state.set_state(GameState.leaderboard)
    await message.answer(
        "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_leaderboard_keyboard()
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_handler(message: Message, state: FSMContext):
    stats = get_user_stats(message.from_user.id)
    balance = get_balance(message.from_user.id)

    if stats:
        favorite_game = f"{stats['favorite_game']} [{stats['favorite_game_count']}]"
        total_games = stats['total_games']
        total_winnings = stats['total_winnings']
        biggest_win = stats['biggest_win']
        registration_date = stats['registration_date'][:10] if stats['registration_date'] else "20.10.2024"
    else:
        favorite_game = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        total_games = 0
        total_winnings = 0
        biggest_win = 0
        registration_date = "20.10.2024"

    await message.answer(
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"üíé –û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏: ${total_winnings:.2f}\n"
        f"üèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: ${biggest_win:.2f}\n"
        f"üéØ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {favorite_game}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        f"üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
    )

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history_handler(message: Message, state: FSMContext):
    await state.set_state(GameState.viewing_history)

    history = get_user_bet_history(message.from_user.id, 10)

    if not history:
        await message.answer(
            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫</b>\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫.\n"
            "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        )
        return

    history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫</b>\n\n"

    game_names = {
        'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
        'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
        'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        'dice_higher': 'üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
        'dice_even': 'üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç',
        'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
        'darts': 'üéØ –î–∞—Ä—Ç—Å',
        'slots': 'üé∞ –°–ª–æ—Ç—ã',
        'mines': 'üí£ –ú–∏–Ω—ã',
        'tower': 'üèó –ë–∞—à–Ω—è',
        'twist': 'üå™ –¢–≤–∏—Å—Ç',
        'combination': 'üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è'
    }

    for i, (game_type, bet_amount, choice, result, win_amount, timestamp) in enumerate(history, 1):
        game_name = game_names.get(game_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')

        if result == "win":
            result_emoji = "‚úÖ"
            result_text = f"–í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}"
        else:
            result_emoji = "‚ùå"
            result_text = f"–ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}"

        history_text += f"{i}. {game_name}\n"
        history_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
        history_text += f"   {result_emoji} {result_text}\n"
        history_text += f"   üìÖ {timestamp[:16]}\n\n"

    await message.answer(history_text)

@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def deposit_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    await state.set_state(GameState.crypto_deposit)
    await message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

@router.message(F.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏")
async def withdraw_handler(message: Message, state: FSMContext):
    balance = get_balance(message.from_user.id)

    if balance < 1.1:
        await message.answer(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: $1.10"
        )
        return

    await state.set_state(GameState.crypto_withdraw)
    await message.answer(
        f"üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balance:.2f}\n"
        f"üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $1.10\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:",
        reply_markup=get_bet_input_keyboard()
    )

@router.message(GameState.crypto_deposit)
async def process_deposit(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace("$", "").replace(",", "."))
        user_id = message.from_user.id

        if amount < 0.2 or amount > 500:
            await message.answer("‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $0.20 –¥–æ $500.00")
            return

        await message.answer("‚è≥ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot
        try:
            invoice_result = await crypto_bot.create_invoice(amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ NN | DICE WIN ${amount:.2f}", "USDT")

            if invoice_result:
                # –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                invoice_url = invoice_result.get('pay_url')
                invoice_id = str(invoice_result.get('invoice_id'))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                add_deposit(user_id, amount, invoice_id)

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)],
                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"check_payment_{invoice_id}")]
                    ]
                )
                await message.answer(
                    f"‚úÖ <b>–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: ${amount:.2f} USDT\n"
                    f"üîó –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n"
                    f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'",
                    reply_markup=keyboard
                )

            else:
                # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞</b>\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å CryptoBot API\n"
                    f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
                    f"üìû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )

        except Exception as e:
            print(f"Error creating invoice: {e}")
            await message.answer(
                f"‚ùå <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )

        await state.set_state(GameState.main_menu)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è! –ü—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.50")

@router.message(GameState.crypto_withdraw)
async def process_withdraw(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace("$", ""))
        user_id = message.from_user.id
        balance = get_balance(user_id)

        if amount < 1.1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: $1.10")
            return

        if amount > balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}")
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CryptoBot
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥...")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot
        result = await crypto_bot.transfer(user_id, amount, "USDT", f"–í—ã–≤–æ–¥ –∏–∑ MoonCasino: ${amount:.2f}")

        if result:
            # –£—Å–ø–µ—à–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ - —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            update_balance(user_id, -amount)
            await message.answer(
                f"‚úÖ <b>–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: ${amount:.2f}\n"
                f"üîó –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ –≤–∞—à CryptoBot –∫–æ—à–µ–ª–µ–∫\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user_id):.2f}",
                reply_markup=get_start_keyboard()
            )
            add_withdrawal(user_id, amount)
        else:
            # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ - –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            admin_id = 6774136020
            try:
                await bot.send_message(
                    admin_id,
                    f"üí∏ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤—ã–≤–æ–¥</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'})\n"
                    f"üÜî ID: <code>{user_id}</code>\n"
                    f"üí∞ –°—É–º–º–∞: ${amount:.2f}\n\n"
                    f"‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ CryptoBot)\n"
                    f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${balance:.2f}"
                )
            except:
                pass

            await message.answer(
                f"‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
                f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${amount:.2f}\n"
                f"üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f} (—Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï —Å–ø–∏—Å–∞–Ω—ã)\n\n"
                f"‚ÑπÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í –∫–∞—Å—Å–µ –∫–∞–∑–∏–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞",
                reply_markup=get_start_keyboard()
            )

        await state.set_state(GameState.main_menu)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞!")

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_callback(callback: CallbackQuery):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    invoice_id = callback.data.split("_")[2]

    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ –∏–∑ CryptoBot
    invoice_data = await crypto_bot.get_invoice(invoice_id)

    if invoice_data and invoice_data.get('status') == 'paid':
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        deposit_info = get_deposit_by_invoice(invoice_id)

        if deposit_info:
            user_id, amount = deposit_info
            update_balance(user_id, amount)
            update_deposit_status(invoice_id, 'completed')

            await callback.message.edit_text(
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${amount:.2f}\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user_id):.2f}",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=None
            )
    else:
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{invoice_id}")]
                ]
            )
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä
@router.message(F.text == "üí£ –ú–∏–Ω—ã")
async def mines_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    balance = get_balance(message.from_user.id)
    if balance < 0.2:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20")
        return

    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='mines')

    quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

    await message.answer(
        f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.message(F.text == "üèó –ë–∞—à–Ω—è")
async def tower_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    balance = get_balance(message.from_user.id)
    if balance < 0.2:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20")
        return

    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='tower')

    quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

    await message.answer(
        f"üèó <b>–ë–∞—à–Ω—è</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.message(F.text == "üå™ –¢–≤–∏—Å—Ç")
async def twist_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    balance = get_balance(message.from_user.id)
    if balance < 0.2:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20")
        return

    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='twist')

    quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

    await message.answer(
        f"üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
        f"üìñ <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        f"üîÑ –ö—Ä—É—Ç–∏—Ç–µ –±–∞—Ä–∞–±–∞–Ω –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ\n"
        f"üíé –î–µ–Ω–µ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ‚≠êÔ∏è(–∑–≤–µ–∑–¥–∞), ‚öìÔ∏è(—è–∫–æ—Ä—å), üêö(—Ä–∞–∫—É—à–∫–∞)\n"
        f"üí∏ –î–µ–Ω–µ–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫ - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n"
        f"üíÄ –ß–µ—Ä–µ–ø - –æ—Ç–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–∞ 1 —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏\n"
        f"üí© –ö–∞–∫–∞—à–∫–∞ - —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–∏–º–≤–æ–ª, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–µ—Ç\n\n"
        f"üé∞ <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–Ω—É–∂–µ–Ω üí∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞):</b>\n"
        f"üêöüêöüêöüêöüêöüêöüêöüí∏\n"
        f"x4 ¬∑ x13 ¬∑ x28.5 ¬∑ x53 ¬∑ x88 ¬∑ x137.5 ¬∑ x205\n\n"
        f"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èüí∏\n"
        f"x2.5 ¬∑ x8 ¬∑ x16.5 ¬∑ x28.5 ¬∑ x45\n\n"
        f"‚öìÔ∏è‚öìÔ∏è‚öìÔ∏èüí∏\n"
        f"x1.6 ¬∑ x5 ¬∑ x10.5\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.message(F.text == "üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è")
async def combination_handler(message: Message, state: FSMContext):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            f"üîí <b>–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {SUBSCRIPTION_CHANNEL}",
            reply_markup=get_subscription_keyboard()
        )
        return

    balance = get_balance(message.from_user.id)
    if balance < 0.2:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20")
        return

    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='combination')

    quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

    await message.answer(
        f"üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
@router.message(F.text.in_(["üé≥ –ë–æ—É–ª–∏–Ω–≥", "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)", "üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", "üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç", "üé≤ –¢—Ä–∏–∞–¥–∞", "üéØ –î–∞—Ä—Ç—Å", "üé∞ –°–ª–æ—Ç—ã"]))
async def channel_games_start_handler(message: Message, state: FSMContext):
    balance = get_balance(message.from_user.id)
    if balance < 0.2:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã
    game_types = {
        "üé≥ –ë–æ—É–ª–∏–Ω–≥": 'bowling',
        "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª": 'basketball',
        "üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)": 'dice_duel',
        "üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ": 'dice_higher',
        "üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç": 'dice_even',
        "üé≤ –¢—Ä–∏–∞–¥–∞": 'triada',
        "üéØ –î–∞—Ä—Ç—Å": 'darts',
        "üé∞ –°–ª–æ—Ç—ã": 'slots'
    }

    game_type = game_types.get(message.text)
    if not game_type:
        return

    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type=game_type)

    quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

    await message.answer(
        f"{message.text}\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.message(GameState.waiting_bet)
async def process_bet_amount(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return

    try:
        bet_amount = float(message.text.replace("$", ""))
        data = await state.get_data()
        game_type = data.get('game_type')

        balance = get_balance(message.from_user.id)

        if bet_amount < 0.2:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $0.20")
            return

        if bet_amount > 500:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $500.00")
            return

        # –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫—É –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        balance_rounded = round(balance, 2)
        bet_rounded = round(bet_amount, 2)

        if bet_rounded > balance_rounded:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance_rounded:.2f}")
            return

        await state.update_data(bet_amount=bet_amount) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –∫–∞–∫ bet_amount
        add_bet_amount_to_history(message.from_user.id, bet_amount)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã
        if game_type == 'bowling':
            await state.set_state(GameState.channel_bowling)
            await message.answer(
                f"üé≥ <b>–ë–æ—É–ª–∏–Ω–≥ (–¥—É—ç–ª—å)</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_bowling_choice_keyboard()
            )
        elif game_type == 'basketball':
            await state.set_state(GameState.channel_basketball)
            await message.answer(
                f"üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_basketball_keyboard()
            )
        elif game_type == 'dice_duel':
            await state.set_state(GameState.channel_dice_duel)
            await message.answer(
                f"üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_dice_duel_choice_keyboard()
            )
        elif game_type == 'dice_higher':
            await state.set_state(GameState.channel_dice_higher)
            await message.answer(
                f"üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_dice_higher_lower_keyboard()
            )
        elif game_type == 'dice_even':
            await state.set_state(GameState.channel_dice_even)
            await message.answer(
                f"üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_dice_even_odd_keyboard()
            )
        elif game_type == 'triada':
            await state.set_state(GameState.channel_triada)
            await message.answer(
                f"üé≤ <b>–¢—Ä–∏–∞–¥–∞</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=get_triada_keyboard()
            )
        elif game_type == 'darts':
            await state.set_state(GameState.channel_darts)
            await message.answer(
                f"üéØ <b>–î–∞—Ä—Ç—Å</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=get_darts_keyboard()
            )
        elif game_type == 'slots':
            # –î–ª—è —Å–ª–æ—Ç–æ–≤ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            update_balance(message.from_user.id, -bet_amount)
            await message.answer(
                f"üé∞ <b>–°–ª–æ—Ç—ã</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                f"üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –∫–∞–Ω–∞–ª–µ...\n\n"
                f"üì∫ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ!"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            from games import game_queue, is_game_running, process_game_queue, play_slots_direct
            game_queue.append({
                'game_type': 'slots',
                'user': message.from_user,
                'bet_amount': bet_amount,
                'choice': 'spin',
                'game_function': play_slots_direct
            })

            if not is_game_running:
                asyncio.create_task(process_game_queue(bot))

            await state.set_state(GameState.main_menu)
        elif game_type == 'combination':
            await state.set_state(GameState.combination_game)
            await message.answer(
                f"üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n\n"
                f"üéÆ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ (100-999):\n–ü—Ä–∏–º–µ—Ä: 123, 456, 789",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True,
                    one_time_keyboard=False
                )
            )
        elif game_type == 'twist':
            await state.set_state(GameState.twist_game)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            twist_state = {
                'anchor_count': 0,      # ‚öìÔ∏è —Å—á–µ—Ç—á–∏–∫
                'star_count': 0,        # ‚≠êÔ∏è —Å—á–µ—Ç—á–∏–∫
                'shell_count': 0,       # üêö —Å—á–µ—Ç—á–∏–∫
                'bet_amount': bet_amount,
                'game_bank': 0,         # –±–∞–Ω–∫ –∏–≥—Ä—ã
                'spins_made': 0
            }
            await state.update_data(twist_state=twist_state)

            keyboard = create_twist_keyboard()
            await message.answer(
                f"üå™ <b>–¢–≤–∏—Å—Ç - –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(message.from_user.id):.2f}\n"
                f"üè¶ –ë–∞–Ω–∫ –∏–≥—Ä—ã: $0.00\n\n"
                f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
                f"üêö –†–∞–∫—É—à–∫–∞: x3.0\n"
                f"‚≠êÔ∏è –ó–≤–µ–∑–¥–∞: x2.0\n"
                f"‚öìÔ∏è –Ø–∫–æ—Ä—å: x1.8\n"
                f"üíÄ –ß–µ—Ä–µ–ø: –±–∞–Ω–∫ —Å–≥–æ—Ä–∞–µ—Ç!\n"
                f"üí© –ö–∞–∫–∞—à–∫–∞: –Ω–∏—á–µ–≥–æ\n\n"
                f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∫—Ü–∏–π:</b>\n"
                f"üêö: 0/7\n"
                f"‚≠êÔ∏è: 0/5\n"
                f"‚öìÔ∏è: 0/3\n\n"
                f"‚ö†Ô∏è –ö–∞–∂–¥—ã–π —Å–ø–∏–Ω —Å—Ç–æ–∏—Ç: ${bet_amount:.2f}\n"
                f"üí∞ –ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞ –¥–µ–Ω—å–≥–∏ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –∏–¥—É—Ç –≤ –±–∞–Ω–∫!",
                reply_markup=keyboard
            )
        elif game_type == 'mines':
            await state.set_state(GameState.mines_setup)
            await message.answer(
                f"üí£ <b>–ú–∏–Ω—ã</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
                reply_markup=get_mines_count_keyboard()
            )
        elif game_type == 'tower':
            await state.set_state(GameState.tower_setup)
            await message.answer(
                f"üèó <b>–ë–∞—à–Ω—è</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –Ω–∞ —É—Ä–æ–≤–Ω–µ:",
                reply_markup=get_tower_mines_keyboard()
            )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–∞ –¥–ª—è –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
@router.message(F.text.in_(["üèÜ –ü–æ–±–µ–¥–∞ (x1.8)", "üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ (x1.8)"]))
async def handle_choice_buttons(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    bet_amount = data.get('bet_amount', 0)

    if current_state == GameState.channel_bowling:
        choice = "win" if "–ü–æ–±–µ–¥–∞" in message.text else "loss"
        await process_channel_game(message, state, 'bowling', bet_amount, choice)
    elif current_state == GameState.channel_dice_duel:
        choice = "win" if "–ü–æ–±–µ–¥–∞" in message.text else "loss"
        await process_channel_game(message, state, 'dice_duel', bet_amount, choice)

@router.message(F.text.in_(["üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ (x1.8)", "‚ùå –ú–∏–º–æ (x1.3)"]))
async def handle_basketball_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_basketball:
        data = await state.get_data()
        bet_amount = data.get('bet_amount', 0)
        choice = "hit" if "–ü–æ–ø–∞–¥–∞–Ω–∏–µ" in message.text else "miss"
        await process_channel_game(message, state, 'basketball', bet_amount, choice)

@router.message(F.text.in_(["‚¨ÜÔ∏è –ë–æ–ª—å—à–µ", "‚¨áÔ∏è –ú–µ–Ω—å—à–µ"]))
async def handle_dice_higher_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_dice_higher:
        data = await state.get_data()
        bet_amount = data.get('bet_amount', 0)
        choice = "higher" if "–ë–æ–ª—å—à–µ" in message.text else "lower"
        await process_channel_game(message, state, 'dice_higher', bet_amount, choice)

@router.message(F.text.in_(["2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ", "1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ"]))
async def handle_dice_even_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_dice_even:
        data = await state.get_data()
        bet_amount = data.get('bet_amount', 0)
        choice = "even" if "–ß–µ—Ç–Ω–æ–µ" in message.text else "odd"
        await process_channel_game(message, state, 'dice_even', bet_amount, choice)

@router.message(F.text.in_(["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"]))
async def handle_triada_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_triada:
        data = await state.get_data()
        bet_amount = data.get('bet_amount', 0)
        choice = message.text[0]  # –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—É –∏–∑ —ç–º–æ–¥–∑–∏
        await process_channel_game(message, state, 'triada', bet_amount, choice)

@router.message(F.text.in_(["üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x1.8)", "‚ö™ –ë–µ–ª–æ–µ (x1.8)"]))
async def handle_darts_choice(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == GameState.channel_darts:
        data = await state.get_data()
        bet_amount = data.get('bet_amount', 0)
        choice = "red" if "–ö—Ä–∞—Å–Ω–æ–µ" in message.text else "white"
        await process_channel_game(message, state, 'darts', bet_amount, choice)

@router.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É")
async def change_bet_amount_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏"""
    current_state = await state.get_state()
    data = await state.get_data()
    game_type = data.get('game_type')

    if current_state in [GameState.channel_bowling, GameState.channel_basketball,
                          GameState.channel_dice_duel, GameState.channel_dice_higher,
                          GameState.channel_dice_even, GameState.channel_triada,
                          GameState.channel_darts, GameState.combination_game]:

        await state.set_state(GameState.waiting_bet)
        balance = get_balance(message.from_user.id)

        quick_keyboard = get_bet_amounts_keyboard(message.from_user.id)

        await message.answer(
            f"üí∞ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏</b>\n\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
            reply_markup=get_bet_input_keyboard()
        )

        if quick_keyboard.inline_keyboard:
            await message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)



@router.message(GameState.combination_game)
async def combination_number_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    bet_amount = data.get('bet_amount', 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    try:
        user_number = int(message.text)
        if 100 <= user_number <= 999:
            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            update_balance(message.from_user.id, -bet_amount)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            winning_number = random.randint(100, 999)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            user_digits = str(user_number)
            winning_digits = str(winning_number)

            exact_matches = sum(1 for i in range(3) if user_digits[i] == winning_digits[i])
            digit_matches = len(set(user_digits) & set(winning_digits))

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
            if exact_matches == 3:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                win_amount = bet_amount * 2.15
                result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x2.15)"
                update_balance(message.from_user.id, win_amount)
                update_game_stats(message.from_user.id, "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è", win_amount)
            elif exact_matches == 2:
                # 2 —Ü–∏—Ñ—Ä—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                win_amount = bet_amount * 1.75
                result_text = f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x1.75)"
                update_balance(message.from_user.id, win_amount)
                update_game_stats(message.from_user.id, "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è", win_amount)
            elif exact_matches == 1:
                # 1 —Ü–∏—Ñ—Ä–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                win_amount = bet_amount * 1.35
                result_text = f"üéâ <b>–ù–µ–ø–ª–æ—Ö–æ!</b>\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x1.35)"
                update_balance(message.from_user.id, win_amount)
                update_game_stats(message.from_user.id, "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è", win_amount)
            else:
                # –ü—Ä–æ–∏–≥—Ä—ã—à
                result_text = f"üò¢ <b>–ù–µ —É–≥–∞–¥–∞–ª–∏</b>\nüí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}"
                update_game_stats(message.from_user.id, "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è", 0)

            await message.answer(
                f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ö–æ–º–±–∏–Ω–∞—Ü–∏—è</b>\n\n"
                f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {user_number}\n"
                f"üéØ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: {winning_number}\n"
                f"üìä –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {exact_matches}\n"
                f"üìà –¶–∏—Ñ—Ä —É–≥–∞–¥–∞–Ω–æ: {digit_matches}\n\n"
                f"{result_text}\n\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(message.from_user.id):.2f}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True,
                    one_time_keyboard=False
                )
            )

            await state.set_state(GameState.bot_games)
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 999!")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ!")

async def process_channel_game(message: Message, state: FSMContext, game_type: str, bet_amount: float, choice: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É."""
    from games import game_queue, is_game_running, process_game_queue
    from games import (play_bowling_direct, play_dice_duel_direct, play_basketball_direct,
                       play_dice_higher_direct, play_dice_even_direct, play_triada_direct,
                       play_darts_direct)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
    balance = get_balance(message.from_user.id)
    balance_rounded = round(balance, 2)
    bet_rounded = round(bet_amount, 2)

    if bet_rounded > balance_rounded:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance_rounded:.2f}")
        await state.set_state(GameState.main_menu)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    update_balance(message.from_user.id, -bet_amount)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –ø–∞–Ω–µ–ª—å
    game_names = {
        'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
        'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
        'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
        'dice_higher': 'üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
        'dice_even': 'üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç',
        'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
        'darts': 'üéØ –î–∞—Ä—Ç—Å'
    }

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –ø—Ä–∏–Ω—è—Ç–æ–π —Å—Ç–∞–≤–∫–µ
    channel_button_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üì∫ –°–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", url="https://t.me/NNDICEWIN")
        ]]
    )

    await message.answer(
        f"‚úÖ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game_names[game_type]}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
        f"üé≤ –í–∞—à –≤—ã–±–æ—Ä: {choice}\n\n"
        f"üì∫ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ!",
        reply_markup=channel_button_keyboard
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–≥—Ä—ã
    game_functions = {
        'bowling': play_bowling_direct,
        'dice_duel': play_dice_duel_direct,
        'basketball': play_basketball_direct,
        'dice_higher': play_dice_higher_direct,
        'dice_even': play_dice_even_direct,
        'triada': play_triada_direct,
        'darts': play_darts_direct
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    game_queue.append({
        'game_type': game_type,
        'user': message.from_user,
        'bet_amount': bet_amount,
        'choice': choice,
        'game_function': game_functions[game_type]
    })

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if not is_game_running:
        asyncio.create_task(process_game_queue(bot))

    await state.set_state(GameState.main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
@router.message(F.text.in_(["2 –º–∏–Ω—ã", "3 –º–∏–Ω—ã", "4 –º–∏–Ω—ã", "5 –º–∏–Ω", "6 –º–∏–Ω", "7 –º–∏–Ω", "8 –º–∏–Ω", "9 –º–∏–Ω", "10 –º–∏–Ω", "11 –º–∏–Ω", "12 –º–∏–Ω", "13 –º–∏–Ω", "14 –º–∏–Ω", "15 –º–∏–Ω", "16 –º–∏–Ω", "17 –º–∏–Ω", "18 –º–∏–Ω", "19 –º–∏–Ω", "20 –º–∏–Ω", "21 –º–∏–Ω–∞", "22 –º–∏–Ω—ã", "23 –º–∏–Ω—ã", "24 –º–∏–Ω—ã"]))
async def mines_count_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    bet_amount = data.get('bet_amount', 0) # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É

    mines_count = int(message.text.split()[0])

    await state.update_data(mines_count=mines_count)
    await state.set_state(GameState.mines_playing)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –º–∏–Ω 5x5
    mines_field = create_mines_field(mines_count)
    await state.update_data(mines_field=mines_field, opened_cells=[], current_coefficient=1.0, clicks_count=0)

    keyboard = create_mines_inline_keyboard(mines_count, [], MINES_COEFFICIENTS[mines_count][0], 0) # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    await message.answer(
        f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
        f"üí£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: {mines_count}\n"
        f"üíé –û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: 0\n"
        f"üéØ –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.00\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:",
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
    await message.answer(
        "üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –∏–≥—Ä—ã",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–º–± –¥–ª—è –±–∞—à–Ω–∏
@router.message(F.text.in_(["1 –±–æ–º–±–∞", "2 –±–æ–º–±—ã", "3 –±–æ–º–±—ã", "4 –±–æ–º–±—ã"]))
async def tower_bombs_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    bet_amount = data.get('bet_amount', 0) # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É

    bombs_count = int(message.text.split()[0])

    await state.set_state(GameState.tower_playing)
    await state.update_data(
        bombs_count=bombs_count,
        tower_level=0,
        opened_levels=[],
        game_over=False
    )

    keyboard = create_tower_inline_keyboard(bombs_count, [], 0) # –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å 0

    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    await message.answer(
        f"üèó <b>–ë–∞—à–Ω—è</b>\n\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
        f"üí£ –ë–æ–º–± –Ω–∞ —É—Ä–æ–≤–Ω–µ: {bombs_count}\n"
        f"üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: 1/6\n"
        f"üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x1.00\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–π—Ñ –Ω–∞ —É—Ä–æ–≤–Ω–µ 1:",
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
    await message.answer(
        "üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –∏–≥—Ä—ã",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫
@router.callback_query(F.data.startswith("quick_amount_"))
async def quick_amount_callback(callback: CallbackQuery, state: FSMContext):
    try:
        amount = float(callback.data.split("_")[2])
        data = await state.get_data()
        game_type = data.get('game_type')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
        balance = get_balance(callback.from_user.id)
        balance_rounded = round(balance, 2)
        amount_rounded = round(amount, 2)

        if amount_rounded > balance_rounded:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: ${balance_rounded:.2f}", show_alert=True)
            return

        await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞: ${amount}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–∞
        await state.update_data(bet_amount=amount) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –∫–∞–∫ bet_amount
        add_bet_amount_to_history(callback.from_user.id, amount)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
        if game_type == 'bowling':
            await state.set_state(GameState.channel_bowling)
            await callback.message.edit_text(
                f"üé≥ <b>–ë–æ—É–ª–∏–Ω–≥ (–¥—É—ç–ª—å)</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_bowling_choice_keyboard()
            )
        elif game_type == 'basketball':
            await state.set_state(GameState.channel_basketball)
            await callback.message.edit_text(
                f"üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_basketball_keyboard()
            )
        elif game_type == 'dice_duel':
            await state.set_state(GameState.channel_dice_duel)
            await callback.message.edit_text(
                f"üé≤ <b>–ö—É–±—ã (–¥—É—ç–ª—å)</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_dice_duel_choice_keyboard()
            )
        elif game_type == 'dice_higher':
            await state.set_state(GameState.channel_dice_higher)
            await callback.message.edit_text(
                f"üé≤ <b>–ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_dice_higher_lower_keyboard()
            )
        elif game_type == 'dice_even':
            await state.set_state(GameState.channel_dice_even)
            await callback.message.edit_text(
                f"üé≤ <b>–ß–µ—Ç/–Ω–µ—á–µ—Ç</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_dice_even_odd_keyboard()
            )
        elif game_type == 'triada':
            await state.set_state(GameState.channel_triada)
            await callback.message.edit_text(
                f"üé≤ <b>–¢—Ä–∏–∞–¥–∞</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=get_triada_keyboard()
            )
        elif game_type == 'darts':
            await state.set_state(GameState.channel_darts)
            await callback.message.edit_text(
                f"üéØ <b>–î–∞—Ä—Ç—Å</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑:",
                reply_markup=get_darts_keyboard()
            )
        elif game_type == 'slots':
            # –î–ª—è —Å–ª–æ—Ç–æ–≤ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤
            current_balance = get_balance(callback.from_user.id)
            if amount > current_balance:
                await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: ${current_balance:.2f}", show_alert=True)
                return

            update_balance(callback.from_user.id, -amount)
            await callback.message.edit_text(
                f"üé∞ <b>–°–ª–æ—Ç—ã</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n"
                f"üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –∫–∞–Ω–∞–ª–µ...\n\n"
                f"üì∫ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ!",
                reply_markup=None
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            from games import game_queue, is_game_running, process_game_queue, play_slots_direct
            game_queue.append({
                'game_type': 'slots',
                'user': callback.from_user,
                'bet_amount': amount,
                'choice': 'spin',
                'game_function': play_slots_direct
            })

            if not is_game_running:
                asyncio.create_task(process_game_queue(bot))

            await state.set_state(GameState.main_menu)

        # –î–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä
        elif game_type == 'mines':
            await state.set_state(GameState.mines_setup)
            await callback.message.edit_text(
                f"üí£ <b>–ú–∏–Ω—ã</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
                reply_markup=get_mines_count_keyboard()
            )
        elif game_type == 'tower':
            await state.set_state(GameState.tower_setup)
            await callback.message.edit_text(
                f"üèó <b>–ë–∞—à–Ω—è</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±:",
                reply_markup=None
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–± –Ω–∞ —É—Ä–æ–≤–Ω–µ:",
                reply_markup=get_tower_mines_keyboard()
            )
        elif game_type == 'combination':
            await state.set_state(GameState.combination_game)
            await callback.message.edit_text(
                f"üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</b>\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: ${amount:.2f}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ (100-999):",
                reply_markup=None
            )
            await callback.message.answer(
                "üéÆ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ!\n–ü—Ä–∏–º–µ—Ä: 123, 456, 789",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True,
                    one_time_keyboard=False
                )
            )
        elif game_type == 'twist':
            await state.set_state(GameState.twist_game)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            twist_state = {
                'anchor_count': 0,      # ‚öìÔ∏è —Å—á–µ—Ç—á–∏–∫
                'star_count': 0,        # ‚≠êÔ∏è —Å—á–µ—Ç—á–∏–∫
                'shell_count': 0,       # üêö —Å—á–µ—Ç—á–∏–∫
                'bet_amount': amount,
                'game_bank': 0,         # –±–∞–Ω–∫ –∏–≥—Ä—ã
                'spins_made': 0
            }
            await state.update_data(twist_state=twist_state)

            keyboard = create_twist_keyboard()
            await callback.message.edit_text(
                f"üå™ <b>–¢–≤–∏—Å—Ç - –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}\n"
                f"üè¶ –ë–∞–Ω–∫ –∏–≥—Ä—ã: $0.00\n\n"
                f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
                f"üêö –†–∞–∫—É—à–∫–∞: x3.0\n"
                f"‚≠êÔ∏è –ó–≤–µ–∑–¥–∞: x2.0\n"
                f"‚öìÔ∏è –Ø–∫–æ—Ä—å: x1.8\n"
                f"üíÄ –ß–µ—Ä–µ–ø: –±–∞–Ω–∫ —Å–≥–æ—Ä–∞–µ—Ç!\n"
                f"üí© –ö–∞–∫–∞—à–∫–∞: –Ω–∏—á–µ–≥–æ\n\n"
                f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–∫—Ü–∏–π:</b>\n"
                f"üêö: 0/7\n"
                f"‚≠êÔ∏è: 0/5\n"
                f"‚öìÔ∏è: 0/3\n\n"
                f"‚ö†Ô∏è –ö–∞–∂–¥—ã–π —Å–ø–∏–Ω —Å—Ç–æ–∏—Ç: ${amount:.2f}",
                reply_markup=keyboard
            )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∏–≥—Ä –ú–∏–Ω—ã –∏ –ë–∞—à–Ω—è
@router.callback_query(F.data.startswith("mine_"))
async def mines_callback_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        mines_positions = data.get('mines_positions', [])
        opened_cells = data.get('opened_cells', [])
        mines_count = data.get('mines_count', 2)
        bet_amount = data.get('bet_amount', 0)
        clicks_count = data.get('clicks_count', 0)

        if callback.data == "mines_cash_out":
            # –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            current_coeff = MINES_COEFFICIENTS[mines_count][clicks_count - 1] if clicks_count > 0 else 1
            win_amount = bet_amount * current_coeff

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à (–¥–µ–Ω—å–≥–∏ —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã)
            update_balance(callback.from_user.id, win_amount)
            update_game_stats(callback.from_user.id, "–ú–∏–Ω—ã", win_amount)

            play_again_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_mines_again")],
                    [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )

            await callback.message.edit_text(
                f"üí∞ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b>\n\n"
                f"üí£ –ú–∏–Ω—ã: {mines_count}\n"
                f"üíé –û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {clicks_count}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{current_coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                reply_markup=play_again_keyboard
            )
            return

        elif callback.data == "mines_exit":
            await callback.message.edit_text(
                f"‚ùå <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}",
                reply_markup=None
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–∞–º –≤ –±–æ—Ç–µ
            await state.set_state(GameState.bot_games)
            await callback.message.answer(
                "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=get_bot_games_keyboard()
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
        parts = callback.data.split("_")
        if len(parts) == 3:
            row, col = int(parts[1]), int(parts[2])
            cell_index = row * 5 + col

            if (row, col) in opened_cells:
                await callback.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
                return

            # –ü–æ–¥–∫—Ä—É—Ç –∫–∞–∑–∏–Ω–æ: –ø–æ—Å–ª–µ 5 –∫–ª–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –º–∏–Ω—É
            is_mine = cell_index in mines_positions
            if clicks_count >= 5 and not is_mine and random.random() < 0.25:  # 25% —à–∞–Ω—Å "—Å–æ–∑–¥–∞—Ç—å" –º–∏–Ω—É
                is_mine = True

            if is_mine:
                # –ü–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                update_game_stats(callback.from_user.id, "–ú–∏–Ω—ã", 0)

                play_again_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_mines_again")],
                        [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                )

                await callback.message.edit_text(
                    f"üí• <b>–í–ó–†–´–í!</b>\n\n"
                    f"üí£ –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!\n"
                    f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}",
                    reply_markup=play_again_keyboard
                )
            else:
                # –û—Ç–∫—Ä—ã–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É
                opened_cells.append((row, col))
                clicks_count += 1

                current_coeff = MINES_COEFFICIENTS[mines_count][clicks_count - 1] if clicks_count <= len(MINES_COEFFICIENTS[mines_count]) else MINES_COEFFICIENTS[mines_count][-1]

                await state.update_data(opened_cells=opened_cells, clicks_count=clicks_count)

                keyboard = create_mines_inline_keyboard(mines_count, opened_cells, current_coeff, clicks_count)

                await callback.message.edit_text(
                    f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
                    f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                    f"üí£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: {mines_count}\n"
                    f"üíé –û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {clicks_count}\n"
                    f"üéØ –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{current_coeff}",
                    reply_markup=keyboard
                )

        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("tower_"))
async def tower_callback_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        tower_mines = data.get('bombs_count', 1) # –ò—Å–ø–æ–ª—å–∑—É–µ–º bombs_count –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        opened_levels = data.get('opened_levels', [])
        current_level = data.get('current_level', 0)
        bet_amount = data.get('bet_amount', 0)

        if callback.data == "tower_cash_out":
            # –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            coeffs = TOWER_COEFFICIENTS[tower_mines]
            current_coeff = coeffs[current_level - 1] if current_level > 0 and current_level - 1 < len(coeffs) else 1
            win_amount = bet_amount * current_coeff

            update_balance(callback.from_user.id, win_amount)
            update_game_stats(callback.from_user.id, "–ë–∞—à–Ω—è", win_amount)

            await callback.message.edit_text(
                f"üí∞ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b>\n\n"
                f"üèó –ë–∞—à–Ω—è: {tower_mines} –±–æ–º–±\n"
                f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {current_level}\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{current_coeff})\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                reply_markup=None
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–∞–º –≤ –±–æ—Ç–µ
            await state.set_state(GameState.bot_games)
            await callback.message.answer(
                "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=get_bot_games_keyboard()
            )
            return

        elif callback.data == "tower_exit":
            await callback.message.edit_text(
                f"‚ùå <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}",
                reply_markup=None
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–∞–º –≤ –±–æ—Ç–µ
            await state.set_state(GameState.bot_games)
            await callback.message.answer(
                "ü§ñ <b>–ò–≥—Ä—ã –≤ –±–æ—Ç–µ:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=get_bot_games_keyboard()
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ –±–∞—à–Ω–∏
        parts = callback.data.split("_")
        if len(parts) >= 3:
            level = int(parts[1])
            cell = int(parts[2])

            if level != current_level:
                await callback.answer("–ú–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å!")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–º–±—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            bomb_positions = random.sample(range(5), tower_mines)

            # –ü–æ–¥–∫—Ä—É—Ç –∫–∞–∑–∏–Ω–æ: –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö 3+ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –±–æ–º–±—É
            is_bomb = cell in bomb_positions
            if level >= 2 and not is_bomb and random.random() < (0.15 * level):  # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —à–∞–Ω—Å "—Å–æ–∑–¥–∞–Ω–∏—è" –±–æ–º–±—ã
                is_bomb = True

            # –ù–∞ —É—Ä–æ–≤–Ω—è—Ö 4-6 (–∏–Ω–¥–µ–∫—Å—ã 3-5) –ù–ï –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º–∏–Ω—ã - —É–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –∏–≥—Ä–æ–∫–∞

            if is_bomb:
                # –ü–æ–ø–∞–ª–∏ –Ω–∞ –±–æ–º–±—É - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                update_game_stats(callback.from_user.id, "–ë–∞—à–Ω—è", 0)

                play_again_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_tower_again")],
                        [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                )

                await callback.message.edit_text(
                    f"üí• <b>–í–ó–†–´–í!</b>\n\n"
                    f"üí£ –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –±–æ–º–±—É –Ω–∞ —É—Ä–æ–≤–Ω–µ {level + 1}!\n"
                    f"üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${bet_amount:.2f}",
                    reply_markup=play_again_keyboard
                )
            else:
                # –ü—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ
                opened_levels.append((level, cell))
                current_level += 1

                await state.update_data(opened_levels=opened_levels, current_level=current_level)

                if current_level >= 6:
                    # –ü—Ä–æ—à–ª–∏ –≤—Å—é –±–∞—à–Ω—é
                    coeffs = TOWER_COEFFICIENTS[tower_mines]
                    final_coeff = coeffs[-1]
                    win_amount = bet_amount * final_coeff

                    update_balance(callback.from_user.id, win_amount)
                    update_game_stats(callback.from_user.id, "–ë–∞—à–Ω—è", win_amount)

                    play_again_keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_tower_again")],
                            [InlineKeyboardButton(text="üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                    )

                    await callback.message.edit_text(
                        f"üéâ <b>–ü–û–ë–ï–î–ê!</b>\n\n"
                        f"üèó –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å—é –±–∞—à–Ω—é!\n"
                        f"üí∞ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f} (x{final_coeff})\n"
                        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(callback.from_user.id):.2f}",
                        reply_markup=play_again_keyboard
                    )
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
                    keyboard = create_tower_inline_keyboard(tower_mines, opened_levels, current_level)

                    coeffs = TOWER_COEFFICIENTS[tower_mines]
                    current_coeff = coeffs[current_level - 1] if current_level - 1 < len(coeffs) else coeffs[-1]

                    await callback.message.edit_text(
                        f"üèó <b>–ë–∞—à–Ω—è</b>\n\n"
                        f"üí∞ –°—Ç–∞–≤–∫–∞: ${bet_amount:.2f}\n"
                        f"üí£ –ë–æ–º–± –Ω–∞ —É—Ä–æ–≤–Ω–µ: {tower_mines}\n"
                        f"üìà –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level + 1}\n"
                        f"üéØ –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{current_coeff}\n\n"
                        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {current_level} –ø—Ä–æ–π–¥–µ–Ω!\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–π—Ñ –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_level + 1}:",
                        reply_markup=keyboard
                    )

        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.set_state(GameState.main_menu)

        has_bets = callback.from_user.id in user_active_bets and user_active_bets[callback.from_user.id]

        await callback.message.edit_text(
            "üé∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=None
        )
        await callback.message.answer(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_start_keyboard(has_bets)
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "play_mines_again")
async def play_mines_again_callback(callback: CallbackQuery, state: FSMContext):
    balance = get_balance(callback.from_user.id)
    if balance < 0.2:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20", show_alert=True)
        return

    await callback.answer()
    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='mines')

    quick_keyboard = get_bet_amounts_keyboard(callback.from_user.id)

    await callback.message.edit_text(
        f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=None
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await callback.message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.callback_query(F.data == "play_tower_again")
async def play_tower_again_callback(callback: CallbackQuery, state: FSMContext):
    balance = get_balance(callback.from_user.id)
    if balance < 0.2:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20", show_alert=True)
        return

    await callback.answer()
    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='tower')

    quick_keyboard = get_bet_amounts_keyboard(callback.from_user.id)

    await callback.message.edit_text(
        f"üèó <b>–ë–∞—à–Ω—è</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=None
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await callback.message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.callback_query(F.data.startswith("twist_"))
async def twist_callback_handler(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ games.py
    from games import twist_callback_handler as games_twist_handler
    return await games_twist_handler(callback, state)

@router.callback_query(F.data == "play_twist_again")
async def play_twist_again_callback(callback: CallbackQuery, state: FSMContext):
    balance = get_balance(callback.from_user.id)
    if balance < 0.2:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º—É–º $0.20", show_alert=True)
        return

    await callback.answer()
    await state.set_state(GameState.waiting_bet)
    await state.update_data(game_type='twist')

    quick_keyboard = get_bet_amounts_keyboard(callback.from_user.id)

    await callback.message.edit_text(
        f"üå™ <b>–¢–≤–∏—Å—Ç</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
        reply_markup=None
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_input_keyboard()
    )

    if quick_keyboard.inline_keyboard:
        await callback.message.answer("‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏:</b>", reply_markup=quick_keyboard)

@router.callback_query(F.data.startswith("leaderboard_"))
async def leaderboard_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    if callback.data == "leaderboard_balance":
        # –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É
        leaderboard = get_leaderboard_by_balance(10)
        text = "üí∞ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É</b>\n\n"

        if not leaderboard:
            text += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        else:
            for i, (user_id, balance) in enumerate(leaderboard, 1):
                try:
                    user_info = await bot.get_chat(user_id)
                    username = f"@{user_info.username}" if user_info.username else user_info.first_name
                except:
                    username = f"ID: {user_id}"

                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                text += f"{medal} {username}: ${balance:.2f}\n"

    elif callback.data.startswith("leaderboard_winnings_"):
        # –¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º
        period = callback.data.split("_")[2]
        period_names = {
            'day': '–∑–∞ –¥–µ–Ω—å',
            'week': '–∑–∞ –Ω–µ–¥–µ–ª—é',
            'month': '–∑–∞ –º–µ—Å—è—Ü',
            'all': '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'
        }

        leaderboard = get_leaderboard_by_winnings(period, 10)
        text = f"üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º {period_names.get(period, '')}</b>\n\n"

        if not leaderboard:
            text += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        else:
            for i, (user_id, total_winnings) in enumerate(leaderboard, 1):
                try:
                    user_info = await bot.get_chat(user_id)
                    username = f"@{user_info.username}" if user_info.username else user_info.first_name
                except:
                    username = f"ID: {user_id}"

                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                text += f"{medal} {username}: ${total_winnings:.2f}\n"

    await callback.message.edit_text(text, reply_markup=get_leaderboard_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if current_state == GameState.play_menu:
        await state.set_state(GameState.main_menu)
        has_bets = message.from_user.id in user_active_bets and user_active_bets[message.from_user.id]
        await message.answer("üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_start_keyboard(has_bets))

    elif current_state == GameState.profile:
        await state.set_state(GameState.main_menu)
        has_bets = message.from_user.id in user_active_bets and user_active_bets[message.from_user.id]
        await message.answer("üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_start_keyboard(has_bets))

    # –ú–µ–Ω—é –∏–≥—Ä
    elif current_state in [GameState.bot_games, GameState.channel_games]:
        await state.set_state(GameState.play_menu)
        await message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=get_play_menu_keyboard())

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä –≤ –±–æ—Ç–µ
    elif current_state in [GameState.mines_setup, GameState.tower_setup]:
        await state.set_state(GameState.bot_games)
        await message.answer("ü§ñ –ò–≥—Ä—ã –≤ –±–æ—Ç–µ:", reply_markup=get_bot_games_keyboard())

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –≤ –±–æ—Ç–µ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
    elif current_state in [GameState.mines_playing, GameState.tower_playing]:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä –≤ –±–æ—Ç–µ
        await state.set_state(GameState.bot_games)
        await message.answer(
            "‚ùå <b>–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞</b>\n\n"
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É:",
            reply_markup=get_bot_games_keyboard()
        )

    # –í–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
    elif current_state == GameState.waiting_bet:
        game_type = data.get('game_type')
        if game_type in ['mines', 'tower', 'combination', 'twist']:
            await state.set_state(GameState.bot_games)
            await message.answer("ü§ñ –ò–≥—Ä—ã –≤ –±–æ—Ç–µ:", reply_markup=get_bot_games_keyboard())
        else:
            await state.set_state(GameState.channel_games)
            await message.answer("üí¨ –ò–≥—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ:", reply_markup=get_channel_games_keyboard())

    # –ö–∞–Ω–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å—Ç–∞–≤–∫–∏
    elif current_state in [GameState.channel_bowling, GameState.channel_basketball,
                          GameState.channel_dice_duel, GameState.channel_dice_higher,
                          GameState.channel_dice_even, GameState.channel_triada,
                          GameState.channel_darts]:
        game_type = data.get('game_type')
        await state.set_state(GameState.waiting_bet)
        balance = get_balance(message.from_user.id)

        game_names = {
            'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥',
            'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
            'dice_duel': 'üé≤ –ö—É–±—ã (–¥—É—ç–ª—å)',
            'dice_higher': 'üé≤ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ',
            'dice_even': 'üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç',
            'triada': 'üé≤ –¢—Ä–∏–∞–¥–∞',
            'darts': 'üéØ –î–∞—Ä—Ç—Å'
        }

        await message.answer(
            f"{game_names.get(game_type, '–ò–≥—Ä–∞')}\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
            reply_markup=get_bet_input_keyboard()
        )

    # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å—Ç–∞–≤–∫–∏
    elif current_state == GameState.combination_game:
        await state.set_state(GameState.waiting_bet)
        balance = get_balance(message.from_user.id)
        await message.answer(
            f"üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç $0.20 –¥–æ $500.00):",
            reply_markup=get_bet_input_keyboard()
        )

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—à–µ–ª–µ–∫
    elif current_state in [GameState.crypto_deposit, GameState.crypto_withdraw]:
        balance = get_balance(message.from_user.id)

        wallet_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )

        await message.answer(
            f"üí≥ <b>–ö–æ—à–µ–ª–µ–∫</b>\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>\n\n"
            f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=wallet_keyboard
        )
        return

    elif current_state in [GameState.admin_add_money, GameState.admin_delete_user, GameState.admin_check_balance, GameState.leaderboard]:
        await state.set_state(GameState.profile)
        balance = get_balance(message.from_user.id)
        username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        first_name = message.from_user.first_name or "–ò–≥—Ä–æ–∫"

        if message.from_user.id == 1597157163:
            profile_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
                    [KeyboardButton(text="üí∏ –ö—ç—à-–±–µ–∫"), KeyboardButton(text="üí∞ +$1")],
                    [KeyboardButton(text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ ID"), KeyboardButton(text="üëÅ –ë–∞–ª–∞–Ω—Å –ø–æ ID")],
                    [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            )
        else:
            profile_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")],
                    [KeyboardButton(text="üí∏ –ö—ç—à-–±–µ–∫"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            )

        stats = get_user_stats(message.from_user.id)
        if stats:
            favorite_game = f"{stats['favorite_game']} [{stats['favorite_game_count']}]"
            total_games = stats['total_games']
            biggest_win = stats['biggest_win']
            registration_date = stats['registration_date'][:10] if stats['registration_date'] else "20.10.2024"
        else:
            favorite_game = "–¢—Ä–∏–∞–¥–∞ [74]"
            total_games = 206
            biggest_win = 9
            registration_date = "20.10.2024"

        await message.answer(
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: {message.from_user.id}\n"
            f"üë§ –ò–º—è: {first_name}\n"
            f"üì± –ù–∏–∫: @{username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>${balance:.2f}</b>\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚î£ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {favorite_game}\n"
            f"‚î£ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: {total_games}\n"
            f"‚îó –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: ${biggest_win:.2f}\n\n"
            f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}",
            reply_markup=profile_keyboard
        )

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        await state.set_state(GameState.main_menu)
        has_bets = message.from_user.id in user_active_bets and user_active_bets[message.from_user.id]
        await message.answer("üé∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_start_keyboard(has_bets))

async def check_pending_payments():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∫–µ—à–±–µ–∫–∞"""
    while True:
        try:
            conn = sqlite3.connect("casino.db")
            c = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
            c.execute("SELECT user_id, amount, invoice_id FROM deposits WHERE status = 'pending'")
            pending_deposits = c.fetchall()
            conn.close()

            for user_id, amount, invoice_id in pending_deposits:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
                invoice_data = await crypto_bot.get_invoice(invoice_id)

                if invoice_data and invoice_data.get('status') == 'paid':
                    # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    update_balance(user_id, amount)
                    update_deposit_status(invoice_id, 'completed')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await bot.send_message(
                            user_id,
                            f"üéâ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
                            f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${amount:.2f}\n"
                            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${get_balance(user_id):.2f}",
                            reply_markup=get_start_keyboard()
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ —Ç.–¥.)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∫–µ—à–±–µ–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ $5
            conn = sqlite3.connect("casino.db")
            c = conn.cursor()
            c.execute("SELECT user_id, available_cashback FROM cashback WHERE available_cashback >= 5.0")
            cashback_users = c.fetchall()
            conn.close()

            for user_id, available_cashback in cashback_users:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∫–µ—à–±–µ–∫
                cashback_amount = claim_cashback(user_id)
                if cashback_amount > 0:
                    try:
                        await bot.send_message(
                            user_id,
                            f"üéÅ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞!</b>\n\n"
                            f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${cashback_amount:.2f}\n"
                            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${get_balance(user_id):.2f}\n\n"
                            f"üéÆ –ö–µ—à–±–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ $5.00"
                        )
                    except:
                        pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∫–µ—à–±–µ–∫–∞: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è
        await asyncio.sleep(5)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(check_pending_payments())

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    retry_count = 0
    max_retries = 5

    while retry_count < max_retries:
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
            await dp.start_polling(
                bot,
                allowed_updates=dp.resolve_used_update_types(),
                timeout=20,
                relax=0.1,
                fast=True
            )
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —à—Ç–∞—Ç–Ω–æ
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à—Ç–∞—Ç–Ω–æ")
            break

        except Exception as e:
            retry_count += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")

            if retry_count < max_retries:
                wait_time = min(5 * retry_count, 30)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                print(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                print("üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                break

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")